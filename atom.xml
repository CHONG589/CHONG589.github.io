<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chong&#39;s Blog</title>
  
  <subtitle>林深时见鹿,海蓝时见鲸。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chong589.github.io/"/>
  <updated>2024-12-25T07:07:25.000Z</updated>
  <id>https://chong589.github.io/</id>
  
  <author>
    <name>zch</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>构造类型</title>
    <link href="https://chong589.github.io/2024/%E6%9E%84%E9%80%A0%E7%B1%BB%E5%9E%8B/"/>
    <id>https://chong589.github.io/2024/%E6%9E%84%E9%80%A0%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-02-04T09:47:18.000Z</published>
    <updated>2024-12-25T07:07:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构体">结构体<a title="#结构体" href="#结构体"></a></h3><h4 id="产生及意义">产生及意义<a title="#产生及意义" href="#产生及意义"></a></h4><h4 id="类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char">类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如 int、char<a title="#类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char" href="#类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char"></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct 结构体名 &#123;</span><br><span class="line">数组类型 成员1；</span><br><span class="line">数据类型 成员2；</span><br><span class="line">......  </span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><h4 id="嵌套定义">嵌套定义<a title="#嵌套定义" href="#嵌套定义"></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct birthday_st &#123;</span><br><span class="line">int year;</span><br><span class="line">int month;</span><br><span class="line">int day;</span><br><span class="line">&#125;;</span><br><span class="line">struct student_st &#123;</span><br><span class="line">int id;</span><br><span class="line">char name[NAMESIZE];</span><br><span class="line">struct birthday_st birth;</span><br><span class="line">int math;</span><br><span class="line">int chinese;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct student_st &#123;</span><br><span class="line">int id;</span><br><span class="line">char name[NAMESIZE];</span><br><span class="line">struct birthday_st &#123;</span><br><span class="line">int year;</span><br><span class="line">int month;</span><br><span class="line">int day;</span><br><span class="line">&#125;birth;</span><br><span class="line">int math;</span><br><span class="line">int chinese;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="定义变量(变量、数组、指针)、初始化及成员引用">定义变量(变量、数组、指针)、初始化及成员引用<a title="#定义变量(变量、数组、指针)、初始化及成员引用" href="#定义变量(变量、数组、指针)、初始化及成员引用"></a></h4><ul><li><p>成员引用：变量名.成员名<br>像上面 <code>struct birthday_st birth</code> 定义变量的方式，这个变量名 birth 存的只是结构体的<em>首地址</em>。</p></li><li><p>成员引用：指针 -&gt; 成员名 <code>(*指针).成员名</code></p></li></ul><h4 id="占用内存空间大小">占用内存空间大小<a title="#占用内存空间大小" href="#占用内存空间大小"></a></h4><p><em>内存对齐</em></p><h4 id="函数传参（值，地址）">函数传参（值，地址）<a title="#函数传参（值，地址）" href="#函数传参（值，地址）"></a></h4><p>一般不用结构体的值(即整个结构体)传参，因为当结构体里的成员很多时，定义形参时也要相对应的大小，内存开销大，所以我们一般传指针，形参只需定义指针即可，而指针变量大小在同一机器中时是固定。</p><h3 id="共用体">共用体<a title="#共用体" href="#共用体"></a></h3><h4 id="产生及意义-1">产生及意义<a title="#产生及意义-1" href="#产生及意义-1"></a></h4><p>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是<strong>任何时候只能有一个成员带有值</strong>。共用体提供了一种使用相同的内存位置的有效方式。</p><h4 id="类型描述">类型描述<a title="#类型描述" href="#类型描述"></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">union [union tag] &#123;</span><br><span class="line">member definition;</span><br><span class="line">member definition;</span><br><span class="line">...</span><br><span class="line">member definition;</span><br><span class="line">&#125; [one or more union variables];</span><br></pre></td></tr></table></figure><p>union tag 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。</p><h4 id="嵌套定义-1">嵌套定义<a title="#嵌套定义-1" href="#嵌套定义-1"></a></h4><p>练习：对一个具有 32 位值的高 16 位和低 16 位进行相加</p><ul><li>方法一：根据共用体和结构体的特性进行解决</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">union &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">uint16_t i;</span><br><span class="line">uint16_t j;</span><br><span class="line">&#125;x;</span><br><span class="line">uint32_t y;</span><br><span class="line">&#125;a;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">a.y = 0x11223344;</span><br><span class="line">printf(&quot;%x&quot;, a.x.i + a.x.j);</span><br><span class="line">exit (0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：用位运算解决</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">uint32_t i = 0x11223344;</span><br><span class="line">printf(&quot;%x\n&quot;, (i &gt;&gt; 16) + i &amp; 0xffff);</span><br><span class="line">exit (0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义变量（变量、数组、指针），初始化及成员引用">定义变量（变量、数组、指针），初始化及成员引用<a title="#定义变量（变量、数组、指针），初始化及成员引用" href="#定义变量（变量、数组、指针），初始化及成员引用"></a></h4><p>跟结构体一样</p><h4 id="占用内存空间大小-1">占用内存空间大小<a title="#占用内存空间大小-1" href="#占用内存空间大小-1"></a></h4><p><strong>共用体占用的内存应足够存储共用体中最大的成员</strong></p><h4 id="函数传参（值，地址）-1">函数传参（值，地址）<a title="#函数传参（值，地址）-1" href="#函数传参（值，地址）-1"></a></h4><h4 id="位域">位域<a title="#位域" href="#位域"></a></h4><p>C 语言的位域（bit-field）是一种特殊的结构体成员，允许我们按位对成员进行定义，指定其占用的位数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">int i;</span><br><span class="line">int j;</span><br><span class="line">&#125;a;</span><br></pre></td></tr></table></figure><p>这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1，在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，您可以定义变量的宽度来告诉编译器，您将只使用这些字节。例如，上面的结构可以重写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">int i: 1;</span><br><span class="line">int j: 1;</span><br><span class="line">&#125;a;</span><br></pre></td></tr></table></figure><p>现在，上面的结构中，a 变量将占用 4 个字节的内存空间(内存对齐的原因)，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 a 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节。</p><h3 id="枚举">枚举<a title="#枚举" href="#枚举"></a></h3><p>枚举是 C 语言中的一种基本数据类型，用于定义一组具有离散值的常量，它可以让数据更简洁，更易读。枚举类型通常用于为程序中的一组相关的常量取名字，以便于程序的可读性和维护性。</p><p>定义一个枚举类型，需要使用 enum 关键字，后面跟着枚举类型的名称，以及用大括号 {} 括起来的一组枚举常量。每个枚举常量可以用一个标识符来表示，也可以为它们指定一个整数值，如果没有指定，那么默认从 0 开始递增。枚举语法定义格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum　枚举名　&#123;</span><br><span class="line">    枚举元素1,枚举元素2,……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来我们举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define MON  1</span><br><span class="line">#define TUE  2</span><br><span class="line">#define WED  3</span><br><span class="line">#define THU  4</span><br><span class="line">#define FRI  5</span><br><span class="line">#define SAT  6</span><br><span class="line">#define SUN  7</span><br></pre></td></tr></table></figure><p>这个看起来代码量就比较多，接下来我们看看使用枚举的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum DAY &#123;</span><br><span class="line">      MON=1, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p><p>可以用 enum 当成宏来使用，enum 在预处理后，里面的值不会替换，这样在查看哪里错的时候，这样才能更直观的知道这个变量是干嘛的，而不是被替换成了值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构体&quot;&gt;结构体&lt;a title=&quot;#结构体&quot; href=&quot;#结构体&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;产生及意义&quot;&gt;产生及意义&lt;a title=&quot;#产生及意义&quot; href=&quot;#产生及意义&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;类型描述(不占存储空间)，描述是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>二维数组</title>
    <link href="https://chong589.github.io/2024/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>https://chong589.github.io/2024/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</id>
    <published>2024-02-02T12:18:01.000Z</published>
    <updated>2024-12-25T06:58:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二维数组的分配">二维数组的分配<a title="#二维数组的分配" href="#二维数组的分配"></a></h3><p>假设要为一个 m * n 的数组分配内存空间</p><h4 id="1.-一次分配">1. 一次分配<a title="#1.-一次分配" href="#1.-一次分配"></a></h4><p><img src="/2024/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/1.png" alt class="φcx"></p><p>这种分配就是把它当作一维数组来分配，通过 i 和 j 的值，计算出具体位置。该分配的内存必须是连续的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int *arr = (int *)malloc(sizeof(int) * m * n);</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; m; i ++)&#123;</span><br><span class="line">    for(int j = 0; j &lt; n; j ++)&#123;</span><br><span class="line">        arr[i * n + j] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意每个元素的下标和 i 、j 的关系</strong></p><h3 id="#2.-二次分配">#2. 二次分配<a title="##2.-二次分配" href="##2.-二次分配"></a></h3><p><img src="/2024/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/2.png" alt class="φcx"></p><p>首先分配一个指针数组 <code>*arr[i]</code>,以行为单位，一行表示一个指针，该指针数组中的每个元素都是一个数组指针，该指针又指向一个一维数组。<strong>后面再对该数组指针分配内存空间</strong>(即对一维数组分配)，这种二维内存的分配是分两次来分配的，因此分配的内存是不连续的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 为指针数组分配内存</span><br><span class="line">int **arr = (int **)malloc(sizeof(int *) * m);</span><br><span class="line">// 为每个指向数组的指针分配空间，即每个指针只需一个指针变量接收，共有 m 个。</span><br><span class="line"></span><br><span class="line">// 再为每个指针数组分配内存空间</span><br><span class="line">for(int i = 0; i &lt; m; i ++)&#123;</span><br><span class="line">    arr[i] = (int *)malloc(sizeof(int) * n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二维数组的分配&quot;&gt;二维数组的分配&lt;a title=&quot;#二维数组的分配&quot; href=&quot;#二维数组的分配&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;假设要为一个 m * n 的数组分配内存空间&lt;/p&gt;
&lt;h4 id=&quot;1.-一次分配&quot;&gt;1. 一次分配&lt;a title=&quot;#1.-一次
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>环境变量</title>
    <link href="https://chong589.github.io/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://chong589.github.io/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2024-01-31T15:03:55.000Z</published>
    <updated>2024-12-25T07:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们平时在装有些软件时，要配置环境变量，那么为什么要配置？它起什么作用？</p><span id="more"></span><h3 id="什么是环境变量">什么是环境变量<a title="#什么是环境变量" href="#什么是环境变量"></a></h3><p>是在操作系统中一个具有特定名字的对象，它包含了一个或多个应用程序所将使用到的信息, 例如: 如系统临时文件夹位置、系统文件夹位置、某些应用软件文件的路径等等…</p><p>当要求系统运行一个程序但是又没有告诉它这个程序所在的完整路径时，系统<strong>默认会在当前目录</strong>下面寻找这个程序,如果找不到就会到环境变量中的 path 中指定的路径去找, 所以我们用户可以通过设置环境变量，来更好的运行程序!</p><p>例：当我们在 cmd 命令行窗口中输入 <code>qq</code> 时：</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png" width="100%" height="100%"></div><p>提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;qq&#x27; is not recognized as an internal or external command</span><br></pre></td></tr></table></figure><p>所以这种方式不能打开 QQ 程序的，如果我们非要在 cmd 中打开 QQ 程序，我们要进入并且找到这个程序的 bin 目录下的 qq.exe 执行程序！</p><p>我电脑中的 QQ 路径为：<code>D:\Program Files (x86)\QQ\QQ\Bin</code></p><p>在 cmd 中进入该路径且输入<code>QQ.exe</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png" width="100%" height="100%"></div><p>所以我们是可以通过命令行中进入到执行程序的位置进行打开该程序，这个效果跟你在桌面点击快捷方式是一个效果。如果关掉 cmd 后重新打开，再次输入 QQ 其实又是同样的问题，这就意味着你要从 cmd 打开 QQ 必须每次按照刚才的步骤进行打开，并且你还必须要切换到这个 QQ 的 bin 目录下才行，这样就很麻烦了（当然这只是个例子，我们完全可以通过快捷方式打开程序）。</p><p>那么有没有办法让我们在随便哪个目录中都可以直接使用 cmd 输入一个 QQ 就可以打开的办法呢?</p><p>这时就要使用到<strong>环境变量</strong>！你只要把刚刚那个 bin 目录的路径添加到环境变量中的系统变量下的 <strong>path</strong> 就可以了，这里的 path 也就是环境变量中用来指定<strong>可执行文件的绝对路径</strong>，这里配置了很多路径，彼此之间用分号隔开!这里操作以 windows 10 为例，步骤如下：</p><p><code>右键点击此电脑 ---&gt; 属性 ---&gt; 高级系统设置 ---&gt; 环境变量</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/3.png" width="100%" height="100%"></div><p>然后找到<code>系统环境变量 ---&gt; Path ---&gt; 编辑 ---&gt; 新建</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/4.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/5.png" width="100%" height="100%"></div><p>复制你 QQ 安装目录下的 bin 路径到新建的对话框中</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/6.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/7.png" width="100%" height="100%"></div><p>最后全部点击确定即可！这时你就可以在 cmd 中的任意目录、任意盘符下进行打开这个应用程序了！</p><p>总之，<strong>环境变量</strong> 的主要作用就是规定了某些系统文件的所在位置！</p><h3 id="用户变量和系统变量的区别">用户变量和系统变量的区别<a title="#用户变量和系统变量的区别" href="#用户变量和系统变量的区别"></a></h3><ul><li><p>用户变量：在环境变量中的用户变量配置只会当前所登录的系统用户生效, 也就是说登录的系统用户可以对他自己所配置的环境变量参数进行增删改 , 不同用户的用户变量之间是独立存在的,并且互不干扰的</p></li><li><p>系统环境变量：在环境变量中系统变量的配置会对所有用户都会有效, 也就是说如果系统变量被修改了，那么任何一个用户都将受到影响!但是只有管理员账户才有权限进行系统变量的设置, 普通系统用户是不能够去修改系统变量的</p></li></ul><h3 id="如何自定义环境变量命令">如何自定义环境变量命令<a title="#如何自定义环境变量命令" href="#如何自定义环境变量命令"></a></h3><p>当我们想通过 cmd 来运行一个自己定义的命令时，就会出现不是内部或外部命令，也不是可运行的程序 或批处理文件的提示信息!</p><p>但是如果我们在cmd中输入一个 shutdown 命令则可以完全正常执行!</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/8.png" width="100%" height="100%"></div><p>这个原因也很简单,正因为 shutdown 在环境变量中定义了它这个命令所在的路径,而test这个命令则没有!</p><p>shutdown命令的默认路径是在 <code>C:\Windows\System32</code> 目录下, 包括一些常见的cmd命令其实都在这个目录下</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/9.png" width="100%" height="100%"></div><p>而 <code>C:\Windows\System32</code> 这个路径也是默认安装系统的时候就被定义在了环境变量当中, 就跟之前定义 QQ 应用程序也是一个道理！</p><p>所以根据这个道理我们也可以自定义一个环境变量来进行调用！要知道变量就是一个可变化的量 我们就利用这个特点来自己定义一个系统变量然后调用它来打开某个应用程序</p><p>我这里要打开微信，当然你完全可以依照之前的办法在 path 中把微信的 WeChat.exe 路径加入到其中, 但是这样子做不够灵活！我们可以先在系统变量中定义一个 weixin 然后值设置为微信目录地址！</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/10.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/11.png" width="100%" height="100%"></div><p>设置好后，我们现在就可以对它进行调用！在 path 中把刚刚自定义好的 weixin 这个变量加入到其中，格式为 <code>%变量名%</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/12.png" width="100%" height="100%"></div><p>这样一来以后你只需要去修改变量的值 path 中就会自动获取到了！接下来就可以去 cmd 中尝试一下打开这个应用程序</p><p><strong>！！！但是这样在 cmd 中用 weixin 启动不成功，即使在变量值中改成 <code>D:\Program Files (x86)\WeChat\WeChat</code> 也还是不行，网上查了一些原因也没解决</strong></p><h3 id="为什么编程开发要配置环境变量">为什么编程开发要配置环境变量<a title="#为什么编程开发要配置环境变量" href="#为什么编程开发要配置环境变量"></a></h3><p>知道什么是环境变量以后，现在应该明白我们在开发 java、python、php 之前需要配置的环境变量的原因了吧！</p><p>比如 Java 我们就需要把 JDK 的 bin 目录添加到环境变量的 path 中，这样我们就可以在任意目录下使用 bin 下面的 .exe 可执行程序 javac.exe</p><p>javac.exe 用来处理 .java 源代码文件，是把源代码文件编译为字节码文件的一个工具,经过 javac.exe 这个工具编译 java 源代码文件后形成的 .class 就是字节码文件</p><p>java.exe 用来处理 .class 字节码文件进行执行的，也就是 JVM 解释执行 java 程序, 从而实现 java 程序的运行</p><p>而他们都在 bin 目录下, 这都是为了能够方便的使用这些开发语言所带有的编译解释工具和命令, 所以我们才要配置环境变量。如果环境变量配置不成功，在 cmd 中去输入 java 就会提示找不到某某的关键词</p><p>所以在开始学习 java 或者其他一些开发语言的时候，为了操作方便必须要配置一下环境变量 从而达到能够正常运行 java 的环境, 其他一些语言也是以此类推!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们平时在装有些软件时，要配置环境变量，那么为什么要配置？它起什么作用？&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>scanf相关知识</title>
    <link href="https://chong589.github.io/2024/scanf%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>https://chong589.github.io/2024/scanf%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2024-01-30T07:08:35.000Z</published>
    <updated>2024-12-25T06:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="使用-scanf-的注意事项">使用 scanf 的注意事项<a title="#使用-scanf-的注意事项" href="#使用-scanf-的注意事项"></a></h3><h4 id="scanf-里面不能像-printf-那样在里面输入-\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。">scanf 里面不能像 printf 那样在里面输入 \n,因为在 scanf 中你在里面写了什么，在输入的时候你要原模原样的输入回去。<a title="#scanf-里面不能像-printf-那样在里面输入-\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。" href="#scanf-里面不能像-printf-那样在里面输入-\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。"></a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这时你输入 i 和 j 时中间就要输入逗号才能正确输入。</span></span><br><span class="line">scacnf(<span class="string">&quot;%d,%d&quot;</span>,&amp;i,&amp;j);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这时你就要在输入 i 和 j 的中间要加上一个空格。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;i,&amp;j);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这时你在输入 i 后还要输入 \n 才能结束。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你在里面没有输入其他，则你输入 i 和 j 时的间隔符可以</span></span><br><span class="line"><span class="comment">//是空格、回车、Tab。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;j);</span><br></pre></td></tr></table></figure><h4 id="scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。">scanf 在用 %s 输入字符串时，输入的字符串中<strong>不能有空格、Tab、回车键</strong>等，它会作为当前输入的结束，即空格、Tab、回车键后面的字符不会再输入进去。<a title="#scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。" href="#scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。"></a></h4><ul><li><p>用 %s 也是非常危险的操作，当你输入的字符串超过了接收数组容量时，它不会报错，而是原样输入进去，这样就发生了<strong>越界</strong>现象，使之存到了这个数组之外的空间中</p></li><li><p>scanf 会返回一个值，当你在 scanf中输入两个值时，<code>scanf(&quot;%d%d&quot;,&amp;i,&amp;j);</code>如果正确输入，则会返回2，若输入错误，则返回不是2的值。所以它在放入循环中时要进行输入是否正确判断，若输入的格式不对，如本来要输入整型值的你输入字符类型，那么你输入错误，则会从你上一次输入的值中取。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">while(1)&#123;</span><br><span class="line">int ret = scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">if(ret != 1)</span><br><span class="line">break;</span><br><span class="line">printf(&quot;i = %d\n&quot;,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">while(scanf(&quot;%d&quot;,&amp;i))&#123;</span><br><span class="line">printf(&quot;i = %d\n&quot;,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你没进行判断跳出，只要中间你输入一个错误，它就会一直输出你上一次输入的值，一直死循环。</p><h4 id="在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）">在用连续的 scanf 时，输入一个字符后，按回车确定的回车符会被下一个 scanf 吸收。（常常会在循环中遇到这种问题，导致出错）<a title="#在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）" href="#在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）"></a></h4><p>这种错误尤其是在循环中要求输入的字符为 char 时，因为回车符就是 char 。当在连续两个 scanf 使用时,当输入的是 int 时不会。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;j);</span><br></pre></td></tr></table></figure><p>这样输入时，你输入第一个值 i 时，然后回车确定，再输入 j 时，此时 j 接收的是回车符。可以用 getchra() 吃掉一个回车符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;i);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;j);</span><br></pre></td></tr></table></figure><h3 id="总结">总结<a title="#总结" href="#总结"></a></h3><ul><li><p>所以在循环中有输入规定格式的值时，要判断输入的值正不正确，即判断 scanf 返回的值，可以将加入到 while(scanf()) 中判断。</p></li><li><p>当输入的值为 char 时，要注意输入后确定的回车符，也会被当作输入值输入进去，要用一个来吸收回车符，输入值为 int 时，不会被吸收，因为回车符为 char。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h3 id=&quot;使用-scanf-的注意事项&quot;&gt;使用 scanf 的注意事项&lt;a title=&quot;#使用-scanf-的注意事项&quot; href=&quot;#使用-scanf-的注意事项&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;scanf-里面不能
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
