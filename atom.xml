<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chong&#39;s Blog</title>
  
  <subtitle>林深时见鹿,海蓝时见鲸。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chong589.github.io/"/>
  <updated>2024-02-16T08:07:13.159Z</updated>
  <id>https://chong589.github.io/</id>
  
  <author>
    <name>Chong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>段错误</title>
    <link href="https://chong589.github.io/2024/%E6%AE%B5%E9%94%99%E8%AF%AF/"/>
    <id>https://chong589.github.io/2024/%E6%AE%B5%E9%94%99%E8%AF%AF/</id>
    <published>2024-02-06T05:10:50.000Z</published>
    <updated>2024-02-16T08:07:13.159Z</updated>
    
    <content type="html"><![CDATA[<p>段错误（Segmentation Fault）是一种常见的运行时错误，通常发生在<strong>访问未分配的内存</strong>或者<strong>试图读写不允许访问的内存区域</strong>时。虽然段错误本身是一个简单的错误，但却可能导致程序不可预测的行为，甚至是崩溃，在Linux中也会导致许多软件无法正常运行。</p><span id="more"></span><h4 id="段错误的原因">段错误的原因<a title="#段错误的原因" href="#段错误的原因"></a></h4><h5 id="未分配的内存">未分配的内存<a title="#未分配的内存" href="#未分配的内存"></a></h5><p>当程序试图<strong>访问未经分配的内存</strong>区域时，会触发段错误。这可能是因为 <em>忘记分配内存</em> 或者 <em>试图访问已经释放的内存</em>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *ptr;</span><br><span class="line">*ptr = 10;      // 未分配内存</span><br></pre></td></tr></table></figure><p>定义了指针要为其分配内存才能使用，我们平时直接指向变量、数组等，好像并没有分配内存也直接用了，其实你在定义变量、数组后，已经为变量，数组分配了空间，你让指针指向它们，是可以直接使用的。</p><h5 id="内存越界">内存越界<a title="#内存越界" href="#内存越界"></a></h5><p>尝试访问数组或其他数据结构的超出边界的元素，导致访问了不允许访问的内存区域。</p><h5 id="空指针引用">空指针引用<a title="#空指针引用" href="#空指针引用"></a></h5><p>试图使用空指针访问内存中的数据，导致段错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *ptr = NULL;</span><br><span class="line">int value = *ptr; // 空指针引用，导致段错误</span><br></pre></td></tr></table></figure><p>还有在释放了内存后，通常将指针指向 NULL, 防止之后访问该指针，如果之后又访问了该指针就会报段错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main () &#123;</span><br><span class="line"></span><br><span class="line">    int *p = NULL;</span><br><span class="line"></span><br><span class="line">    p = malloc (sizeof (int));      </span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        printf (&quot;malloc () error!&quot;);</span><br><span class="line">        exit (1);                          </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *p = 11;</span><br><span class="line">    printf(&quot;%d\n&quot;, *p);</span><br><span class="line"></span><br><span class="line">    free (p);                       // 释放空间</span><br><span class="line">    p = NULL;                       // 防止后面访问                              </span><br><span class="line"></span><br><span class="line">    exit (0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="栈溢出">栈溢出<a title="#栈溢出" href="#栈溢出"></a></h5><p>当递归函数调用层级太深或者局部变量占用过多栈空间时，可能导致栈溢出，触发段错误。</p><h5 id="未初始化的指针">未初始化的指针<a title="#未初始化的指针" href="#未初始化的指针"></a></h5><p>使用未初始化的指针进行内存访问，会引发段错误。</p><h5 id="内存保护">内存保护<a title="#内存保护" href="#内存保护"></a></h5><p>一些操作系统或硬件平台会对某些内存区域进行保护，试图修改这些区域的内容会导致段错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const char *str = &quot;Hello, World!&quot;;</span><br><span class="line">str[0] = &#x27;h&#x27;; // 尝试修改只读内存，导致段错误</span><br></pre></td></tr></table></figure><h5 id="文件操作错误">文件操作错误<a title="#文件操作错误" href="#文件操作错误"></a></h5><p>尝试读写一个不可访问的文件或者试图操作不存在的文件也可能引发段错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;段错误（Segmentation Fault）是一种常见的运行时错误，通常发生在&lt;strong&gt;访问未分配的内存&lt;/strong&gt;或者&lt;strong&gt;试图读写不允许访问的内存区域&lt;/strong&gt;时。虽然段错误本身是一个简单的错误，但却可能导致程序不可预测的行为，甚至是崩溃，在Linux中也会导致许多软件无法正常运行。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>环境变量</title>
    <link href="https://chong589.github.io/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://chong589.github.io/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2024-01-31T15:03:55.000Z</published>
    <updated>2024-02-03T08:00:55.802Z</updated>
    
    <content type="html"><![CDATA[<p>我们平时在装有些软件时，要配置环境变量，那么为什么要配置？它起什么作用？</p><span id="more"></span><h4 id="什么是环境变量">什么是环境变量<a title="#什么是环境变量" href="#什么是环境变量"></a></h4><p>是在操作系统中一个具有特定名字的对象，它包含了一个或多个应用程序所将使用到的信息, 例如: 如系统临时文件夹位置、系统文件夹位置、某些应用软件文件的路径等等…</p><p>当要求系统运行一个程序但是又没有告诉它这个程序所在的完整路径时，系统<strong>默认会在当前目录</strong>下面寻找这个程序,如果找不到就会到环境变量中的 path 中指定的路径去找, 所以我们用户可以通过设置环境变量，来更好的运行程序!</p><p>例：当我们在 cmd 命令行窗口中输入 <code>qq</code> 时：</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png" width="100%" height="100%"></div>提示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;qq&#x27; is not recognized as an internal or external command</span><br></pre></td></tr></table></figure><p>所以这种方式不能打开 QQ 程序的，如果我们非要在 cmd 中打开 QQ 程序，我们要进入并且找到这个程序的 bin 目录下的 qq.exe 执行程序！</p><p>我电脑中的 QQ 路径为：<code>D:\Program Files (x86)\QQ\QQ\Bin</code></p><p>在 cmd 中进入该路径且输入<code>QQ.exe</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png" width="100%" height="100%"></div><p>所以我们是可以通过命令行中进入到执行程序的位置进行打开该程序，这个效果跟你在桌面点击快捷方式是一个效果。如果关掉 cmd 后重新打开，再次输入 QQ 其实又是同样的问题，这就意味着你要从 cmd 打开 QQ 必须每次按照刚才的步骤进行打开，并且你还必须要切换到这个 QQ 的 bin 目录下才行，这样就很麻烦了（当然这只是个例子，我们完全可以通过快捷方式打开程序）。</p><p>那么有没有办法让我们在随便哪个目录中都可以直接使用 cmd 输入一个 QQ 就可以打开的办法呢?</p><p>这时就要使用到<strong>环境变量</strong>！你只要把刚刚那个 bin 目录的路径添加到环境变量中的系统变量下的 <strong>path</strong> 就可以了，这里的 path 也就是环境变量中用来指定<strong>可执行文件的绝对路径</strong>，这里配置了很多路径，彼此之间用分号隔开!这里操作以 windows 10 为例，步骤如下：</p><p><code>右键点击此电脑 ---&gt; 属性 ---&gt; 高级系统设置 ---&gt; 环境变量</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/3.png" width="100%" height="100%"></div><p>然后找到<code>系统环境变量 ---&gt; Path ---&gt; 编辑 ---&gt; 新建</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/4.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/5.png" width="100%" height="100%"></div><p>复制你 QQ 安装目录下的 bin 路径到新建的对话框中</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/6.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/7.png" width="100%" height="100%"></div><p>最后全部点击确定即可！这时你就可以在 cmd 中的任意目录、任意盘符下进行打开这个应用程序了！<br>总之，<strong>环境变量</strong> 的主要作用就是规定了某些系统文件的所在位置！</p><h4 id="用户变量和系统变量的区别">用户变量和系统变量的区别<a title="#用户变量和系统变量的区别" href="#用户变量和系统变量的区别"></a></h4><ul><li><p>用户变量：在环境变量中的用户变量配置只会当前所登录的系统用户生效, 也就是说登录的系统用户可以对他自己所配置的环境变量参数进行增删改 , 不同用户的用户变量之间是独立存在的,并且互不干扰的</p></li><li><p>系统环境变量：在环境变量中系统变量的配置会对所有用户都会有效, 也就是说如果系统变量被修改了，那么任何一个用户都将受到影响!但是只有管理员账户才有权限进行系统变量的设置, 普通系统用户是不能够去修改系统变量的</p></li></ul><h4 id="如何自定义环境变量命令">如何自定义环境变量命令<a title="#如何自定义环境变量命令" href="#如何自定义环境变量命令"></a></h4><p>当我们想通过 cmd 来运行一个自己定义的命令时，就会出现不是内部或外部命令，也不是可运行的程序 或批处理文件的提示信息!</p><p>但是如果我们在cmd中输入一个 shutdown 命令则可以完全正常执行!</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/8.png" width="100%" height="100%"></div><p>这个原因也很简单,正因为 shutdown 在环境变量中定义了它这个命令所在的路径,而test这个命令则没有!</p><p>shutdown命令的默认路径是在 <code>C:\Windows\System32</code> 目录下, 包括一些常见的cmd命令其实都在这个目录下</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/9.png" width="100%" height="100%"></div><p>而 <code>C:\Windows\System32</code> 这个路径也是默认安装系统的时候就被定义在了环境变量当中, 就跟之前定义 QQ 应用程序也是一个道理！</p><p>所以根据这个道理我们也可以自定义一个环境变量来进行调用！要知道变量就是一个可变化的量 我们就利用这个特点来自己定义一个系统变量然后调用它来打开某个应用程序</p><p>我这里要打开微信，当然你完全可以依照之前的办法在 path 中把微信的 WeChat.exe 路径加入到其中, 但是这样子做不够灵活！我们可以先在系统变量中定义一个 weixin 然后值设置为微信目录地址！</p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/10.png" width="100%" height="100%"></div><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/11.png" width="100%" height="100%"></div><p>设置好后，我们现在就可以对它进行调用！在 path 中把刚刚自定义好的 weixin 这个变量加入到其中，格式为 <code>%变量名%</code></p><div align="center"><img src="/2024/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/12.png" width="100%" height="100%"></div><p>这样一来以后你只需要去修改变量的值 path 中就会自动获取到了！接下来就可以去 cmd 中尝试一下打开这个应用程序</p><p><strong>！！！但是这样在 cmd 中用 weixin 启动不成功，即使在变量值中改成 <code>D:\Program Files (x86)\WeChat\WeChat</code> 也还是不行，网上查了一些原因也没解决</strong></p><h4 id="为什么编程开发要配置环境变量">为什么编程开发要配置环境变量<a title="#为什么编程开发要配置环境变量" href="#为什么编程开发要配置环境变量"></a></h4><p>知道什么是环境变量以后，现在应该明白我们在开发 java、python、php 之前需要配置的环境变量的原因了吧！</p><p>比如 Java 我们就需要把 JDK 的 bin 目录添加到环境变量的 path 中，这样我们就可以在任意目录下使用 bin 下面的 .exe 可执行程序 javac.exe</p><p>javac.exe 用来处理 .java 源代码文件，是把源代码文件编译为字节码文件的一个工具,经过 javac.exe 这个工具编译 java 源代码文件后形成的 .class 就是字节码文件</p><p>java.exe 用来处理 .class 字节码文件进行执行的，也就是 JVM 解释执行 java 程序, 从而实现 java 程序的运行</p><p>而他们都在 bin 目录下, 这都是为了能够方便的使用这些开发语言所带有的编译解释工具和命令, 所以我们才要配置环境变量。如果环境变量配置不成功，在 cmd 中去输入 java 就会提示找不到某某的关键词</p><p>所以在开始学习 java 或者其他一些开发语言的时候，为了操作方便必须要配置一下环境变量 从而达到能够正常运行 java 的环境, 其他一些语言也是以此类推!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们平时在装有些软件时，要配置环境变量，那么为什么要配置？它起什么作用？&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
