{"title":"static","date":"2024-01-30T07:31:31.000Z","date_formatted":{"ll":"2024年1月30日","L":"2024/01/30","MM-DD":"01-30"},"updated":"2024-02-03T08:01:29.247Z","content":"<span id=\"more\"></span>\n<p>static 不仅有<strong>继承性</strong>，另外，常用于修饰任何变量或者是函数，使用 static 定义的变量，它会自动初始化为 0。</p>\n<h5 id=\"1.-解决变量冲突问题\">1. 解决变量冲突问题<a title=\"#1.-解决变量冲突问题\" href=\"#1.-解决变量冲突问题\"></a></h5>\n<p>首先有一个 minproj 的工程文件，该文件下有 main.c  proj.c  proj.h 三个文件</p>\n<p>main.c : 写函数的调用<br>\nproj.c : 函数的实现<br>\nproj.h ：函数声明的位置</p>\n<p>main.c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;proj.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int i = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;[%s]: i = %d\\n&quot;,__FUNCTION__,i);</span><br><span class=\"line\">        func();</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>proj.c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;proj.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int i = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">void func(void)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        printf(&quot;[%s]: i = %d\\n&quot;,__FUNCTION__,i);</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>proj.h</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef PROJ_H___</span><br><span class=\"line\">#define PROJ_H___</span><br><span class=\"line\"></span><br><span class=\"line\">void func(void);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这三个文件当中的全局变量 i 按理来说它们都只作用在本 .c 文件中，因为它们的作用范围和生命周期是不同的，但是编译后出现了错误</p>\n<p><img src=\"/Learn/static.htm/staic.png\" alt=\"编译结果\" class=\"φcx\"></p>\n<p>显示对 i 的定义重复定义了。所以 main.c 和 proj.c 链接后的 i 会导致作用范围一样，即导致冲突。编译 --&gt; 链接 --&gt; 装入，链接时会出现两个文件的 i。</p>\n<p>解决方法：<br>\n如果想要 main.c 和 proj.c 中的 i 变量作用在各自的 .c 文件中，则在各自定义 i 变量时加上关键字 static。像这样 <code>static int i = 10;</code>这样则当前文件修饰的变量只能在当前文件用，这样就不冲突了。</p>\n<h5 id=\"2.-函数\">2. 函数<a title=\"#2.-函数\" href=\"#2.-函数\"></a></h5>\n<p>将文件 proj.c 中修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void func(void)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        printf(&quot;[%s]: i = %d\\n&quot;,__FUNCTION__,i);</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 proj.h 中声明时也加上 static<br>\n在函数前加了个 static,使其只能在当前文件使用。编译函数<br>\n<img src=\"/Learn/static.htm/func_erro.png\" alt><br>\n即在 proj.c 文件中，该函数定义只能在该 .c 文件中使用，声明时也同样，所以在 proj.h 中声明时是用不了的，而在 main.c 文件中又使用了 func(), 这样就导致未定义就使用 func() 。</p>\n<p><strong>在函数定义是加上 static 是防止当前函数对外扩展</strong></p>\n<p>解决方法<br>\nmain.c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;proj.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">static int i = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;[%s]: i = %d\\n&quot;,__FUNCTION__,i);</span><br><span class=\"line\">        call_func();</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>proj.c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;proj.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">static int i = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">static void func(void)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        printf(&quot;[%s]: i = %d\\n&quot;,__FUNCTION__,i);</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void call_func()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        func();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>proj.h</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef PROJ_H___</span><br><span class=\"line\">#define PROJ_H___</span><br><span class=\"line\"></span><br><span class=\"line\">void call_func();</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>func() 函数还是只能在本文件使用，只不过借助了一个 call_func() 函数来执行 func().这样就能保证 func() 在本文件中使用，而在其他文件中通过调用 call_func() 来执行 func().</p>\n<p>#####总结</p>\n<ol>\n<li>防止工程中链接各文件时，出现相同变量的问题，将变量用 static 定义</li>\n<li>在函数定义是加上 static 是防止当前函数对外扩展</li>\n</ol>\n","link":"Learn/static","comments":true,"plink":"https://CHONG589.github.io/Learn/static/","reward":true,"copyright":{"published":"2024年1月30日","updated":"2024年2月3日","author":"Chong","link":"<a href=\"https://CHONG589.github.io/Learn/static/\" title=\"static\">https://CHONG589.github.io/Learn/static/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}