{"title":"笔记","date":"2024-03-12T12:52:00.000Z","date_formatted":{"ll":"2024年3月12日","L":"2024/03/12","MM-DD":"03-12"},"updated":"2024-03-12T12:52:45.969Z","content":"<h4 id=\"有头节点的链表和无头结点的链表之间的注意事项\">有头节点的链表和无头结点的链表之间的注意事项<a title=\"#有头节点的链表和无头结点的链表之间的注意事项\" href=\"#有头节点的链表和无头结点的链表之间的注意事项\"></a></h4>\n<p>首先看下面例子：</p>\n<ul>\n<li>\n<p>无头结点的代码<br>\nmain.c</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;list.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    stu_node *list = NULL;</span><br><span class=\"line\">    score tmp;                      // 采用变量的形式定义，不然用指针还要为它分配内存</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (i = 0; i &lt; 7; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp.id = i;</span><br><span class=\"line\">        snprintf (tmp.name, NAMESIZE, &quot;str%d&quot;, i);</span><br><span class=\"line\">        tmp.math = rand () % 100;</span><br><span class=\"line\">        tmp.chinese = rand () % 100;</span><br><span class=\"line\"></span><br><span class=\"line\">        list_insert(list, &amp;tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_show (list);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    exit (0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>list.c</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;list.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int list_insert (stu_node *list, score *data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    stu_node *new;</span><br><span class=\"line\"></span><br><span class=\"line\">    new = malloc (sizeof (*new));</span><br><span class=\"line\">    if (new == NULL) &#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    new -&gt; data = *data;</span><br><span class=\"line\">    // new -&gt; next = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    new -&gt; next = list;</span><br><span class=\"line\">    list = new;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这段程序看着好像没错误，但是在 list_insert 这个函数执行完后，并没有插入到 list 中，插入的数据而是丢失了。</p>\n<p>原因是在 main 函数中，定义了 list 后初始化指向了 NULL,而用函数 list_insert 传过去后，复制了一份一样的地址，同样指向 NULL, 在插入函数里面的操作，全都是对复制的那个指针操作的（main 函数中的那个指针还是指向 NULL），而 insert 函数执行完后，把操作过的那个指针就被销毁了，这样就导致数据丢失了。</p>\n<p><img src=\"/Learn/linklist/nohead/%E7%AC%94%E8%AE%B0.htm/1.jpg\" alt class=\"φcx\"></p>\n<p>而在带头节点的代码中，初始化时是指向了一个头节点的，不是 NULL ，所以传过去后，即使是地址的复印份，但 insert 可以对这个地址操作（也可能是为这个指针分配了内存，inser 是对内存操作，而无头结点的是对指针赋值，改变了指向）。</p>\n<p>正确的应该为 list_insert 函数的返回值改为 stu_node * ,然后再 main 函数中在调用 list_insert 函数时，用 list 接收返回值，这样才不会丢失。（或者用二级指针传参），这样直接操作的就是 main 函数中的 list 指针。</p>\n<p>所以在操作没分配空间的指针时要注意用二级指针传参（当然也可以用另一种不是二级指针的方式）。</p>\n</li>\n</ul>\n","link":"Learn/linklist/nohead/笔记","comments":true,"plink":"https://CHONG589.github.io/Learn/linklist/nohead/笔记/","reward":true,"copyright":{"published":"2024年3月12日","updated":"2024年3月12日","author":"Chong","link":"<a href=\"https://CHONG589.github.io/Learn/linklist/nohead/笔记/\" title=\"笔记\">https://CHONG589.github.io/Learn/linklist/nohead/笔记/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}