{"title":"scanf相关知识","date":"2024-01-30T07:08:35.000Z","date_formatted":{"ll":"2024年1月30日","L":"2024/01/30","MM-DD":"01-30"},"author":"Chong","thumbnail":"2024/scanf相关知识/./thumb.png","link":"2024/scanf相关知识","comments":true,"updated":"2024-12-25T06:39:27.000Z","content":"<span id=\"more\"></span>\n<h3 id=\"使用-scanf-的注意事项\">使用 scanf 的注意事项<a title=\"#使用-scanf-的注意事项\" href=\"#使用-scanf-的注意事项\"></a></h3>\n<h4 id=\"scanf-里面不能像-printf-那样在里面输入-\\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。\">scanf 里面不能像 printf 那样在里面输入 \\n,因为在 scanf 中你在里面写了什么，在输入的时候你要原模原样的输入回去。<a title=\"#scanf-里面不能像-printf-那样在里面输入-\\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。\" href=\"#scanf-里面不能像-printf-那样在里面输入-\\n,因为在-scanf-中你在里面写了什么，在输入的时候你要原模原样的输入回去。\"></a></h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这时你输入 i 和 j 时中间就要输入逗号才能正确输入。</span></span><br><span class=\"line\">scacnf(<span class=\"string\">&quot;%d,%d&quot;</span>,&amp;i,&amp;j);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时你就要在输入 i 和 j 的中间要加上一个空格。</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;i,&amp;j);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时你在输入 i 后还要输入 \\n 才能结束。</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,&amp;i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果你在里面没有输入其他，则你输入 i 和 j 时的间隔符可以</span></span><br><span class=\"line\"><span class=\"comment\">//是空格、回车、Tab。</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;i,&amp;j);</span><br></pre></td></tr></table></figure>\n<h4 id=\"scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。\">scanf 在用 %s 输入字符串时，输入的字符串中<strong>不能有空格、Tab、回车键</strong>等，它会作为当前输入的结束，即空格、Tab、回车键后面的字符不会再输入进去。<a title=\"#scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。\" href=\"#scanf-在用-%s-输入字符串时，输入的字符串中不能有空格、tab、回车键等，它会作为当前输入的结束，即空格、tab、回车键后面的字符不会再输入进去。\"></a></h4>\n<ul>\n<li>\n<p>用 %s 也是非常危险的操作，当你输入的字符串超过了接收数组容量时，它不会报错，而是原样输入进去，这样就发生了<strong>越界</strong>现象，使之存到了这个数组之外的空间中</p>\n</li>\n<li>\n<p>scanf 会返回一个值，当你在 scanf中输入两个值时，<code>scanf(&quot;%d%d&quot;,&amp;i,&amp;j);</code>如果正确输入，则会返回2，若输入错误，则返回不是2的值。所以它在放入循环中时要进行输入是否正确判断，若输入的格式不对，如本来要输入整型值的你输入字符类型，那么你输入错误，则会从你上一次输入的值中取。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">while(1)&#123;</span><br><span class=\"line\">\tint ret = scanf(&quot;%d&quot;,&amp;i);</span><br><span class=\"line\">\tif(ret != 1)</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tprintf(&quot;i = %d\\n&quot;,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">while(scanf(&quot;%d&quot;,&amp;i))&#123;</span><br><span class=\"line\">\tprintf(&quot;i = %d\\n&quot;,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你没进行判断跳出，只要中间你输入一个错误，它就会一直输出你上一次输入的值，一直死循环。</p>\n<h4 id=\"在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）\">在用连续的 scanf 时，输入一个字符后，按回车确定的回车符会被下一个 scanf 吸收。（常常会在循环中遇到这种问题，导致出错）<a title=\"#在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）\" href=\"#在用连续的-scanf-时，输入一个字符后，按回车确定的回车符会被下一个-scanf-吸收。（常常会在循环中遇到这种问题，导致出错）\"></a></h4>\n<p>这种错误尤其是在循环中要求输入的字符为 char 时，因为回车符就是 char 。当在连续两个 scanf 使用时,当输入的是 int 时不会。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;i);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;j);</span><br></pre></td></tr></table></figure>\n<p>这样输入时，你输入第一个值 i 时，然后回车确定，再输入 j 时，此时 j 接收的是回车符。可以用 getchra() 吃掉一个回车符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;i);</span><br><span class=\"line\">getchar();</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;j);</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<ul>\n<li>\n<p>所以在循环中有输入规定格式的值时，要判断输入的值正不正确，即判断 scanf 返回的值，可以将加入到 while(scanf()) 中判断。</p>\n</li>\n<li>\n<p>当输入的值为 char 时，要注意输入后确定的回车符，也会被当作输入值输入进去，要用一个来吸收回车符，输入值为 int 时，不会被吸收，因为回车符为 char。</p>\n</li>\n</ul>\n","prev":{"title":"环境变量","link":"2024/环境变量"},"plink":"https://CHONG589.github.io/2024/scanf相关知识/"}