{"title":"指针与变量","date":"2024-02-02T13:55:50.000Z","date_formatted":{"ll":"2024年2月2日","L":"2024/02/02","MM-DD":"02-02"},"author":"Chong","thumbnail":"2024/指针与变量/./thumb.png","link":"2024/指针与变量","comments":true,"updated":"2025-04-10T07:59:20.531Z","content":"<h1 id=\"1.-变量与地址\">1. 变量与地址<a title=\"#1.-变量与地址\" href=\"#1.-变量与地址\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = &amp;i;</span><br></pre></td></tr></table></figure>\n<p>p 就是一个指针变量，用来存放变量 i 的地址值，所以我们平常所说的定义一个指针指向一个值，其实就是定义一个指针变量来存放这个值的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> **q = &amp;p;</span><br></pre></td></tr></table></figure>\n<p>p 是一个指针变量，q 是用来存放指针变量 p 的地址值的变量，即定义时一个 <code>*</code> 指存放地址的变量，<code>**</code> 指是用来存放指针变量的地址的变量。要满足两边的类型相同。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *p;</span><br><span class=\"line\"><span class=\"type\">float</span> *q;</span><br><span class=\"line\"><span class=\"type\">double</span> *d;</span><br><span class=\"line\"><span class=\"type\">char</span> *c;</span><br></pre></td></tr></table></figure>\n<p>不管定义的是什么类型的指针变量 (即我们通常说的指针)，是几级的指针，以及定义的结构体类型的指针，其在某一个平台上所占的空间是确定的大小，在 64 位的机器上占 8 个字节。</p>\n<p>不同类型的指针，其在运算时，如 <code>*p</code> 在做取值运算时，若 p 为 char ，则取一个字节，int 时，则取四个字节，所以什么类型的数据，要对应什么类型的指针，不然在取值时取得的大小与实际不符。</p>\n<h1 id=\"2.-指针与指针变量(上面也有解释)\">2. 指针与指针变量(上面也有解释)<a title=\"#2.-指针与指针变量(上面也有解释)\" href=\"#2.-指针与指针变量(上面也有解释)\"></a></h1>\n<blockquote>\n<p>指针：就是一个地址，是常量，不会变的。<br>\n指针变量：用来存放指针的变量，可以改变。<br>\n我们常说的某指针指向谁，哪个指针又指向谁，是指改变指针变量的值。</p>\n</blockquote>\n<h1 id=\"3.-直接访问与间接访问\">3. 直接访问与间接访问<a title=\"#3.-直接访问与间接访问\" href=\"#3.-直接访问与间接访问\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = &amp;i;    </span><br><span class=\"line\"><span class=\"type\">int</span> **q = &amp;p;</span><br><span class=\"line\"></span><br><span class=\"line\"> i --&gt; <span class=\"number\">1</span>                        q --&gt; <span class=\"number\">0x3000</span> --&gt; &amp;p</span><br><span class=\"line\">&amp;i --&gt; <span class=\"number\">0x2000</span>                   &amp;q --&gt; <span class=\"number\">0x4000</span> </span><br><span class=\"line\"> p --&gt; <span class=\"number\">0x2000</span>    --&gt; &amp;i         *q --&gt; *(&amp;p)  --&gt; &amp;i</span><br><span class=\"line\">&amp;p --&gt; <span class=\"number\">0x3000</span>                  **q --&gt; *(*q)  --&gt; *(&amp;i) --&gt; <span class=\"number\">1</span></span><br><span class=\"line\">*p --&gt; *(<span class=\"number\">0x2000</span>) --&gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/%E6%8C%87%E9%92%88%E4%B8%8E%E5%8F%98%E9%87%8F/1.jpg\" alt class=\"φcx\"></p>\n<h1 id=\"4.-空指针与野指针\">4. 空指针与野指针<a title=\"#4.-空指针与野指针\" href=\"#4.-空指针与野指针\"></a></h1>\n<blockquote>\n<p>野指针：<code>int *p = 0x2000;</code> 这种直接赋地址的形式，因为你不知道这块地址是否可用，通常很危险。<br>\n空指针：<code>int *p = NULL;</code> NULL 即为位于地址 0 的位置，<strong>0 号地址不分配给任何进程</strong>，指针定义出来后暂时还不知道指向哪里时，则将它指向 NULL；</p>\n</blockquote>\n<h1 id=\"5.-空类型\">5. 空类型<a title=\"#5.-空类型\" href=\"#5.-空类型\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *q = <span class=\"literal\">NULL</span>;     </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>任何类型的指针值都能够把自己的值赋给 <code>void *</code>， <code>void *</code> 也能够把当前自己的值赋给任何类型的指针。当自己不知道要用到什么类型的值时使用。</p>\n</blockquote>\n<h1 id=\"6.-定义与初始化的书写规则\">6. 定义与初始化的书写规则<a title=\"#6.-定义与初始化的书写规则\" href=\"#6.-定义与初始化的书写规则\"></a></h1>\n<h1 id=\"7.-指针运算\">7. 指针运算<a title=\"#7.-指针运算\" href=\"#7.-指针运算\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*     &amp;   关系运算   ++   --</span><br></pre></td></tr></table></figure>\n<p><code>*p++</code>：等同于：<code>*p;  p += 1;</code></p>\n<p><strong>解析:</strong> 但是，因为 ++ <strong>后置</strong> 的时候，本身含义就是先运算后增加1（运算指的是 p++ 作为一个整体与前面的 <code>*</code> 进行运算；增加 1 指的是 p + 1），所以实际上 <code>*p++</code> 符号 <strong>整体对外表现的值</strong> 是 <code>*p</code> 的值，运算完成后  p 再加 1。</p>\n<p><code>*++p</code>：等同于 <code>p += 1; *p;</code></p>\n<p><strong>解析：</strong> 由于 ++ 在 <code>p</code> 的前面，++ 前置的含义是，先 p 加1，得到一个新的 p（它的值是原来 p 的值加1）。然后这个新的 p 再与前面的  <code>*</code> 结合。</p>\n<h1 id=\"8.-指针与数组\">8. 指针与数组<a title=\"#8.-指针与数组\" href=\"#8.-指针与数组\"></a></h1>\n<h2 id=\"指针与一维数组\">指针与一维数组<a title=\"#指针与一维数组\" href=\"#指针与一维数组\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = a;</span><br><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">a[i] = *(a + i) = *(p + i) = p[i];</span><br><span class=\"line\">&amp;a[i] = a + i = p + i = &amp;p[i];</span><br></pre></td></tr></table></figure>\n<p>这样看来指针 (指针变量) 好像是等价于一维数组的，但是它们是不完全等价的，<strong>首先，a 是地址，是一个常量，p 是指针变量，是一个变量，a++ 是不能运算的 (a = a + 1)，常量不能出现在运算符左边进行赋值操作，但 p++ 可以</strong> 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p++    --&gt;  p = p + 1        --&gt; p 的指向已经改变</span><br><span class=\"line\">p + 1  --&gt;  p 的指向未改变  </span><br></pre></td></tr></table></figure>\n<h2 id=\"指针与二维数组\">指针与二维数组<a title=\"#指针与二维数组\" href=\"#指针与二维数组\"></a></h2>\n<h3 id=\"二维数组结合指针的理解\">二维数组结合指针的理解<a title=\"#二维数组结合指针的理解\" href=\"#二维数组结合指针的理解\"></a></h3>\n<p><code>a[i][j]</code> 相当于是数组名为 <code>a[i]</code>，然后取第 j 个元素，即为 <code>a[i][j]</code>，用指针的形式表示为：<code>*(*(a + i) + j)</code>。</p>\n<p>(a + i) 是先按行移动指针，移动的 1 就是一行，即一行 j 个元素，移到第 i 行的首地址，此时 (a + i) 还只是 <code>a[i]</code> 的函数名（地址），即在第 i 个数组的函数名地址，a + i 只是一个地址，要取 <code>a[i]</code>，还要加 <code>*</code>，即 <code>*(a + i)</code>（具体可参考 <a href=\"https://chong589.github.io/2024/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\" target=\"_blank\">二维数组的二次分配</a>），而 <code>a[i]</code> 又为 <code>a[i][j]</code> 的函数名，即地址，<code>a[i] + j</code> 为 <code>a[i][j]</code> 的地址，<code>*</code> 取值后成为 <code>a[i][j]</code>。</p>\n<p><strong>二维数组的二次分配解析：二维数组的行指针就是一个二级指针用于存储一级指针的地址，所以在分配行指针时大小就是一个指针变量的大小，它是存一级指针的地址。二维数组 <code>a[i][j]</code> 中，<code>(a + i)</code> 表示的就是取第 i 个二级指针变量里存的地址（就是一级指针的地址），而 <code>*(a + i)</code> 就是取一级指针里的内容，即变量的地址（为 <code>a[i]</code> ）</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> i, j;</span><br><span class=\"line\"><span class=\"type\">int</span> *p;</span><br></pre></td></tr></table></figure>\n<p>p = a 是不允许的，因为 p 是在列指针上移动的，而 a 是在行指针上移动的，即 p + 1 和 a + 1 所表达的含义不一样，a + 1 是指加一行，p + 1 是加一个元素。</p>\n<p><code>p = *a</code> 即为 <code>*(a + 0)</code> 此种形式是可以的，此时 <code>*a</code> 取的是数组元素的地址,而不是存储元素地址的地址，使之在数组在列指针上移动，即每加 1 为一个元素大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = *a;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p[i]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>二维数组也可以用这种方式输出。</p>\n<h1 id=\"9.-指针数组与数组指针(工作常用，指针函数、数组指针)\">9. 指针数组与数组指针(工作常用，指针函数、数组指针)<a title=\"#9.-指针数组与数组指针(工作常用，指针函数、数组指针)\" href=\"#9.-指针数组与数组指针(工作常用，指针函数、数组指针)\"></a></h1>\n<p><strong>数组指针</strong>：像整型指针为指向整型的指针，而数组指针则为指向数组的指针。</p>\n<blockquote>\n<p>【存储类型】 数据类型  <code>(*指针名)[下标]  = 值</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*p)[<span class=\"number\">3</span>]; --&gt; type name; --&gt; <span class=\"type\">int</span>[<span class=\"number\">3</span>] *p;</span><br></pre></td></tr></table></figure>\n<p>type 可以是 <code>int char double</code>，以及结构体类型，上面这种为数组类型。<code>int *p</code>；p 每加一，移动一个 int 大小，而 <code>int (*p)[3]</code> 即 <code>int[3] *p</code> 移动三个 int 大小。是数组间移动。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> i,j;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = *a;</span><br><span class=\"line\"><span class=\"type\">int</span> (*q)[<span class=\"number\">3</span>] = a;</span><br></pre></td></tr></table></figure>\n<p>这种形式定义的 q 每加一，和 a 加一是一样的，q 加一，移动三个 int型元素大小，和二维数组的行指针一样。但要注意 <strong>区别</strong>：<strong>a 是常量，q 是变量，二维数组的本质就是一个数组指针</strong>。</p>\n<blockquote>\n<p>【存储类型】 数据类型  * 数组名【下标】  = 值；</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *arr[<span class=\"number\">3</span>];  --&gt;  TYPE NAME;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"函数","link":"2024/函数"},"next":{"title":"字符数组","link":"2024/字符串"},"plink":"https://CHONG589.github.io/2024/指针与变量/","toc":[{"id":"1.-变量与地址","title":"1. 变量与地址","index":"1"},{"id":"2.-指针与指针变量(上面也有解释)","title":"2. 指针与指针变量(上面也有解释)","index":"2"},{"id":"3.-直接访问与间接访问","title":"3. 直接访问与间接访问","index":"3"},{"id":"4.-空指针与野指针","title":"4. 空指针与野指针","index":"4"},{"id":"5.-空类型","title":"5. 空类型","index":"5"},{"id":"6.-定义与初始化的书写规则","title":"6. 定义与初始化的书写规则","index":"6"},{"id":"7.-指针运算","title":"7. 指针运算","index":"7"},{"id":"8.-指针与数组","title":"8. 指针与数组","index":"8","children":[{"id":"指针与一维数组","title":"指针与一维数组","index":"8.1"},{"id":"指针与二维数组","title":"指针与二维数组","index":"8.2"}]},{"id":"9.-指针数组与数组指针(工作常用，指针函数、数组指针)","title":"9. 指针数组与数组指针(工作常用，指针函数、数组指针)","index":"9"}]}