{"title":"函数","date":"2024-02-02T14:01:05.000Z","date_formatted":{"ll":"2024年2月2日","L":"2024/02/02","MM-DD":"02-02"},"author":"Chong","thumbnail":"2024/函数/./thumb.png","link":"2024/函数","comments":true,"updated":"2024-12-25T07:30:57.000Z","content":"<h3 id=\"函数的定义\">函数的定义<a title=\"#函数的定义\" href=\"#函数的定义\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型   函数名   (形参说明)</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>argc 是一个计数器，计算从终端传了多少个参数过来。argv[] 是一个列表，用来保存传过来的参数。</p>\n<h3 id=\"函数的传参\">函数的传参<a title=\"#函数的传参\" href=\"#函数的传参\"></a></h3>\n<ul>\n<li>值传参</li>\n<li>地址传参</li>\n<li>全局变量</li>\n</ul>\n<h3 id=\"函数的调用\">函数的调用<a title=\"#函数的调用\" href=\"#函数的调用\"></a></h3>\n<ul>\n<li>嵌套调用</li>\n<li>递归调用 (面试常考，非常考验编程功底)</li>\n</ul>\n<p>阶乘</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">func</span> <span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n * func (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\tres = func(n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d! = %d\\n&quot;</span>,n,res);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>斐波那契数列</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 1, 1, 2, 3, 5, 8, 13, 21, 34......</span></span><br><span class=\"line\"><span class=\"comment\">// n = (n - 1) + (n - 2)</span></span><br><span class=\"line\"><span class=\"comment\">// (n == 1 || n == 2)  ---&gt;   return 1;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">fib</span> <span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fib (n - <span class=\"number\">1</span>) + fib (n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入你要求的斐波那契数列的项数：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\tres = fib(n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fib[%d] = %d\\n&quot;</span>,n,res);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数与数组\">函数与数组<a title=\"#函数与数组\" href=\"#函数与数组\"></a></h3>\n<h4 id=\"数组传参方式\">数组传参方式<a title=\"#数组传参方式\" href=\"#数组传参方式\"></a></h4>\n<p>传参时传的是数组的首地址，所以还要传数组的大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_arr</span> <span class=\"params\">(<span class=\"type\">int</span> *p, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, p[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">\tprint_arr(a,<span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(*a));</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 print_arr 函数中，接收数组的是一个指针变量，也就是接收的是数组首地址，实际上这个函数是不知道数组的大小的，只知道数组首地址，而在定义函数时用 sizeof§ / sizeof(*p) 是不可行的，sizeof§ 肯定是 8 字节，这是固定的，这算出来的是接收地址的指针变量的大小，并不是数组的大小。所以在传参时要传数组的大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_arr</span> <span class=\"params\">(<span class=\"type\">int</span> p[], <span class=\"type\">int</span> n)</span></span><br></pre></td></tr></table></figure>\n<p>定义时这样写成数组的形式，看似好像是把整个数组传过去了，实则不然，它的含义仍然是指针变量，跟上面是一样的。</p>\n<p>所以在形参中定义成数组的形式和在 main 函数中定义时是不一样的，作为形参时，它就是指针变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[N] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = a;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">实参：         a       *a           a[<span class=\"number\">0</span>]        &amp;a[<span class=\"number\">3</span>]       p[i]        p       *p          p+<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\t   *(a+<span class=\"number\">0</span>)                               *(p+i)              *(p+<span class=\"number\">0</span>)</span><br><span class=\"line\">形参接收类型： <span class=\"type\">int</span>*     <span class=\"type\">int</span>          <span class=\"type\">int</span>         <span class=\"type\">int</span>*        <span class=\"type\">int</span>         <span class=\"type\">int</span>*    <span class=\"type\">int</span>        <span class=\"type\">int</span>*     </span><br></pre></td></tr></table></figure>\n<h4 id=\"数组逆序实现\">数组逆序实现<a title=\"#数组逆序实现\" href=\"#数组逆序实现\"></a></h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span> <span class=\"params\">(<span class=\"type\">int</span> *a, <span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j, tmp, mid;</span><br><span class=\"line\">\tmid = (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt;= mid; i++)&#123;</span><br><span class=\"line\">\t\tj = n - <span class=\"number\">1</span> -i;</span><br><span class=\"line\">\t\ttmp = a[i];</span><br><span class=\"line\">\t\ta[i] = a[j];</span><br><span class=\"line\">\t\ta[j] = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// puts(a);     puts 是用于输出 char * </span></span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(*a); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\tfunc(a,<span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(*a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(*a); i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数与二维数组\">函数与二维数组<a title=\"#函数与二维数组\" href=\"#函数与二维数组\"></a></h4>\n<ul>\n<li>方式一：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M   3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N   4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_arr</span> <span class=\"params\">(<span class=\"type\">int</span> *p, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[M][N] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">\tprint_arr(&amp;a[<span class=\"number\">0</span>][<span class=\"number\">0</span>], M * N);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里函数的形参采用的是一级指针接收，传入的实参不能直接传 a, a 为二维数组，为行指针，一级指针只能在列指针中移动，所以实参应转化为列指针 &amp;a[0][0] 传入, 把二维数组当成一个大的一维数组，个数为 M * N 。这里 &amp;a[0][0] 还可以为 *a 、a[0]、*(a + 0)。</p>\n<ul>\n<li>方式二：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M   3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N   4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维数组 a 的本质就是一个数组指针,指向数组的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 或 void print_arr(int p[][N], int m, int n)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_arr</span> <span class=\"params\">(<span class=\"type\">int</span> (*p)[N], <span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;      </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"comment\">//  结果为：8，所以也是一个指针变量，不过这个指向的是一个数组，数组大小为 N 个元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(p) = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(p));   </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 或 printf(&quot;%4d &quot;, p[i][j]);</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d &quot;</span>, *(*(p + i) + j));       </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a[M][N] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sizeof(a) = %d\\n&quot;</span>,<span class=\"keyword\">sizeof</span>(a));      <span class=\"comment\">// 结果为 48</span></span><br><span class=\"line\">\tprint_arr(a, M, N);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想在实参中传入一个二维数组，而不是把它当成一维数组传入，那么在函数定义时的形参中要有与二维数组相对应的类型，前面已学过<strong>二维数组的本质就是数组指针</strong>，所以要接收一个二维数组，就应该在形参中用数组指针接收，a + 1 和 p + 1 效果是一样的，都是行指针。int (*p)[N] 中 N 为二维数组的列数。将二维数组接收过来后，对应的行数和列数也接收过来了，接下来就跟平时处理二维数组时一样。</p>\n<p>同样，跟一维数组一样，传过来的数组，接收的是首地址，同样不知道大小，所以还要传大小参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> [M][N] = &#123;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = *a;</span><br><span class=\"line\"><span class=\"type\">int</span> (*q)[N] = a;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">实参：      a[i][j]     *(a+i)+j        a[i]+j      p[i]        *p      q[i][j]     *q       q              p+<span class=\"number\">3</span>     q+<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*(q+<span class=\"number\">0</span>)</span><br><span class=\"line\">形参类型：  <span class=\"type\">int</span>          <span class=\"type\">int</span> *          <span class=\"type\">int</span> *       <span class=\"type\">int</span>          <span class=\"type\">int</span>     <span class=\"type\">int</span>         <span class=\"type\">int</span> *   <span class=\"title function_\">int</span> <span class=\"params\">(*)</span>[N]    <span class=\"type\">int</span> *    <span class=\"title function_\">int</span><span class=\"params\">(*)</span>[N]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"练习题\">练习题<a title=\"#练习题\" href=\"#练习题\"></a></h4>\n<ul>\n<li>求每个学生的平均成绩</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M   3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N   5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_arr</span> <span class=\"params\">(<span class=\"type\">float</span> (*p)[N], <span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;  科目一  科目二  科目三   科目四  平均\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%7.2f &quot;</span>, *(*(p + i) + j));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求每个学生的平均成绩，并把平均成绩写在后面</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">average</span> <span class=\"params\">(<span class=\"type\">float</span> (*p)[N], <span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">float</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">\t\t\ttmp += p[i][j]; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp[i][<span class=\"number\">4</span>] = tmp / (N - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> a[M][N] = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;, &#123;<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;&#125;;\t</span><br><span class=\"line\">\taverage(a, M, N);</span><br><span class=\"line\">\tprint_arr(a, M, N);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/%E5%87%BD%E6%95%B0/1.png\" alt class=\"φcx\"></p>\n<p>求总平均成绩和把指定学生的四科成绩打印出来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M   3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N   4</span></span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"title function_\">average_scope</span><span class=\"params\">(<span class=\"type\">int</span> *p, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tsum += p[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum / n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">find_num</span><span class=\"params\">(<span class=\"type\">int</span> (*p)[N], <span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(*(p + num) + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a[M][N] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"type\">float</span> ave;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tave = average_scope(*a, M * N);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ave = %.2f\\n&quot;</span>, ave);</span><br><span class=\"line\">\tfind_num(a, num);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数与字符数组\">函数与字符数组<a title=\"#函数与字符数组\" href=\"#函数与字符数组\"></a></h4>\n<ul>\n<li>strcpy 的实现，它在库中的封装方式为：</li>\n</ul>\n<p><code>char *strcpy (char *dest, const char *src); </code></p>\n<p>src 为常量指针，不能通过该指针改变变量的值，因为该指针的内容是不能改变的。所以自己实现 strcpy 的代码也可用这种形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">mystrcpy</span> <span class=\"params\">(<span class=\"type\">char</span> *dest, <span class=\"type\">const</span> <span class=\"type\">char</span> *src)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *ret = dest;                   <span class=\"comment\">// 用 ret 记录 dest 的头指针，因为下面 dest++ 指针会移动</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dest != <span class=\"literal\">NULL</span> &amp;&amp; src != <span class=\"literal\">NULL</span>)    <span class=\"comment\">// 最后返回 ret 即可</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((*dest++ = *src++) != <span class=\"string\">&#x27;\\0&#x27;</span>);\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str2[<span class=\"number\">128</span>];</span><br><span class=\"line\">\tmystrcpy (str2, str1);</span><br><span class=\"line\">\t<span class=\"comment\">// puts 会自动在后面加换行符</span></span><br><span class=\"line\">\t<span class=\"built_in\">puts</span> (str2);                </span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>strncpy 实现</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">mystrncpy</span> <span class=\"params\">(<span class=\"type\">char</span> *dest, <span class=\"type\">const</span> <span class=\"type\">char</span> *src, <span class=\"type\">size_t</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n &amp;&amp; (dest[i] = src[i]); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// (dest[i] = src[i]) 作用是一边拷贝到 dest 中，一边用作判断，当 (dest[i] = src[i])</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 的值为 \\0 即在 &amp;&amp; 运算中式子不成立，跳出循环,因为 有时 src 的长度会小于 n ，即 src </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 不够长, 那就只拷贝 src 那么长的</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">// i &lt; n 时才拷贝 \\0, i &gt;= n，会自动跳过这条语句</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; n; i++)</span><br><span class=\"line\">\t\tdest[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若 src 没有 n 那么长，经过 (dest[i] = src[i]) 将 \\0 复制到了 dest 中,且判断跳出循环，这时 \\0 是赋值到了字符串中的，当 src &gt; n 时，是因为 i &lt; n 跳出的，\\0 并无拷贝，最后应该将 dest[i] = ‘\\0’;</p>\n<h3 id=\"函数与指针\">函数与指针<a title=\"#函数与指针\" href=\"#函数与指针\"></a></h3>\n<h4 id=\"指针函数-(返回值为指针)\">指针函数 (返回值为指针)<a title=\"#指针函数-(返回值为指针)\" href=\"#指针函数-(返回值为指针)\"></a></h4>\n<p>根据 Type name 可知，指针函数是定义函数，所以为：</p>\n<p>定义形式：返回值 函数名 （形参）  如：<code>int *fun (int)</code></p>\n<p>用途：例如前面 find_num 的实现，它只让你找到第几个学生的成绩，并没有然你输出，你却遍历输出那个学生的成绩，显然不是最完美的解决方案，这时就可以用返回一个指向函数的指针</p>\n<p>理论上的实现方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*)[N] find_num (<span class=\"type\">int</span> (*p)[N], <span class=\"type\">int</span> num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p + num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把指针 p 移动到第 num 的学生的位置，由于 p 为行指针，所以理论上要这样写返回值就也要为对应的类型，即也要行指针，所以返回值为 int (*)[N],但是我们就只是想要得到第 num 行的那些数据，根本不需整个二维数组的形式返回来，只需在 num 行使用列指针即可，所以可以这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M   3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N   4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> * <span class=\"title function_\">find_num</span> <span class=\"params\">(<span class=\"type\">int</span> (*p)[N], <span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &gt; M - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;        <span class=\"comment\">// 不能写 -1，因为返回类型为指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(p + num);     <span class=\"comment\">// 也可 p[num];</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[M][N] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *res;</span><br><span class=\"line\">    res = find_num(a, num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, res[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Can not find!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数指针\">函数指针<a title=\"#函数指针\" href=\"#函数指针\"></a></h4>\n<p>记忆：整型指针为指针指向整型，那么函数指针自然就是指向函数的指针</p>\n<p>根据 Type name 可知，函数指针是定义指针，所以为：</p>\n<p>定义形式：类型 （*指针名） (形参)  如: <code>int (*p)(int);</code></p>\n<ul>\n<li>类型：int (int) --&gt; 函数和形参的类型</li>\n<li>name: *p</li>\n<li>两个合起来就为 <code>int (*p)(int);</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">add</span> <span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">int</span> (*p) (<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 也可 p = &amp;add; 函数名跟数组名一样，就是个地址</span></span><br><span class=\"line\">    p = add;            </span><br><span class=\"line\">    <span class=\"comment\">// ret = add (a, b);  // 原来的写法</span></span><br><span class=\"line\">    ret = p (a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;%d\\n&quot;</span>, ret);  </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数指针数组\">函数指针数组<a title=\"#函数指针数组\" href=\"#函数指针数组\"></a></h4>\n<ul>\n<li>指针数组：数组中每个元素就是一个指针</li>\n<li>函数指针：指向函数的指针</li>\n<li>函数指针数组：数组中每个元素都是一个指向函数的指针</li>\n</ul>\n<p>定义：类型 (*数组名 【下标】)  (形参) 如：<code>int (*arr[N]) (int);</code></p>\n<p>类型：<code>int (int)</code> --&gt; 函数和形参的类型</p>\n<p>name: <code>*arr[N] </code><br>\n两个合起来就为 <code>int (*arr[N]) (int);</code></p>\n<h4 id=\"指向指针函数的函数指针数组\">指向指针函数的函数指针数组<a title=\"#指向指针函数的函数指针数组\" href=\"#指向指针函数的函数指针数组\"></a></h4>\n<ul>\n<li>\n<p>函数指针数组：数组中每个元素都是一个指向函数的指针</p>\n</li>\n<li>\n<p>指针函数 (返回值为指针)，即这个函数是指针类型的</p>\n</li>\n<li>\n<p>数组中的每个指向函数的指针</p>\n</li>\n<li>\n<p>定义：<code>int *(*funcp[N])(int);</code></p>\n</li>\n<li>\n<p>指针数组：<code>(*funcp[N])</code></p>\n</li>\n<li>\n<p>函数指针数组: 要加上返回值类型和形参类型，即：<code>int (*funcp[N])(int)(int);</code></p>\n</li>\n<li>\n<p>指针函数：即返回值为指针（即返回值为地址），将里面的元素的返回值为整型指针，而不是整型。<code>int *(*funcp[N])(int);</code></p>\n</li>\n</ul>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p>自己的理解：为什么不能直接调用函数，而是特地定义指针来，因为函数名是地址常量，函数指针是指针变量，有区别，就跟前面学的指针变量跟数组名一样的区别。</p>\n<p>老师讲解：传参时如果传一个函数名过去(因为可能要用到某函数，将此函数传过去用)，这时形参就要定义一个同类型的来接收。</p>\n<p>传整形数     ----&gt;    整型指针接收</p>\n<p>传数组名     ----&gt;    指针接收</p>\n<p>函数名       ----&gt;    指向函数的指针来接收</p>\n<p>如：快速排序的封装</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span> <span class=\"params\">(<span class=\"type\">void</span> *base, <span class=\"type\">size_t</span> nmemb, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> (*compar) (<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">const</span> <span class=\"type\">void</span> *))</span>;</span><br></pre></td></tr></table></figure>\n<p>此方式定义为函数指针，返回值为函数</p>\n<p>总之就是为了满足传参的要求，这些函数叫<strong>回调函数</strong>。</p>\n<p><strong>数组、指针与函数的结合</strong></p>\n<p><strong>数组指针</strong>：像整型指针为指向整型的指针，而数组指针则为指向数组的指针。</p>\n<ul>\n<li>Type name</li>\n<li>Type —&gt; 数组 —&gt; int[N]</li>\n<li>name —&gt; 指针 —&gt; *p</li>\n<li>Type name —&gt; int (*p)[N];</li>\n</ul>\n<p><strong>指针数组</strong>：数组中每个元素就是一个指针。</p>\n<ul>\n<li>Type —&gt; int *</li>\n<li>name —&gt; arr[N]</li>\n<li>Type name —&gt; int *arr[N]</li>\n</ul>\n<p><strong>指针函数</strong>：定义函数</p>\n<ul>\n<li>返回值 函数名 （形参）</li>\n<li>返回值 —&gt; int *</li>\n<li>函数名 —&gt; func</li>\n</ul>\n<p><strong>函数指针</strong>：指向函数的指针，定义指针</p>\n<ul>\n<li>Type name</li>\n<li>Type —&gt; int (int)</li>\n<li>name —&gt; *p</li>\n<li>int (*p) (int)</li>\n</ul>\n<p><strong>函数指针数组</strong>：数组中每个元素都是一个指向函数的指针</p>\n<ul>\n<li>指针数组：int *arr[N]</li>\n<li>函数指针：int (*p) (int)</li>\n</ul>\n<p>只需将函数指针的指针名改为数组的形式就可：int (*arr[N]) (int)</p>\n<p><strong>指向指针函数的函数指针数组</strong></p>\n<p>指针数组是指向函数，那么指向指针函数的函数指针数组为指向指针函数，只需在定义函数的返回值时定义指针类型即可：int *(*func[N]) (int)</p>\n","prev":{"title":"构造类型","link":"2024/构造类型"},"next":{"title":"指针与变量","link":"2024/指针与变量"},"plink":"https://CHONG589.github.io/2024/函数/"}