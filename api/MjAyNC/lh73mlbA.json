{"title":"函数","date":"2024-02-02T14:01:05.000Z","date_formatted":{"ll":"2024年2月2日","L":"2024/02/02","MM-DD":"02-02"},"author":"Chong","thumbnail":"2024/函数/./thumb.png","link":"2024/函数","comments":true,"updated":"2024-02-04T09:45:03.771Z","content":"<h4 id=\"1.-函数的定义\">1. 函数的定义<a title=\"#1.-函数的定义\" href=\"#1.-函数的定义\"></a></h4>\n<blockquote>\n<p>数据类型   函数名   (形参说明)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main (int argc, char *argv[]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>argc 是一个计数器，计算从终端传了多少个参数过来。argv[] 是一个列表，用来保存传过来的参数。</p>\n<h4 id=\"2.-函数的传参\">2. 函数的传参<a title=\"#2.-函数的传参\" href=\"#2.-函数的传参\"></a></h4>\n<pre><code>值传参\n地址传参\n全局变量\n</code></pre>\n<h4 id=\"3.-函数的调用\">3. 函数的调用<a title=\"#3.-函数的调用\" href=\"#3.-函数的调用\"></a></h4>\n<ul>\n<li>\n<p>嵌套调用</p>\n</li>\n<li>\n<p>递归调用 (面试常考，非常考验编程功底)<br>\n阶乘</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int func (int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (n &lt; 0)</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (n == 0 || n == 1)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    return n * func (n - 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    int res;</span><br><span class=\"line\"></span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    res = func(n);</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;%d! = %d\\n&quot;,n,res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>斐波那契数列</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 1, 1, 2, 3, 5, 8, 13, 21, 34......</span><br><span class=\"line\"></span><br><span class=\"line\">// n = (n - 1) + (n - 2)</span><br><span class=\"line\">// (n == 1 || n == 2)  ---&gt;   return 1;  </span><br><span class=\"line\"></span><br><span class=\"line\">int fib (int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (n &lt; 0)</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    if (n == 1 || n == 2)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return fib (n - 1) + fib (n - 2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    int res;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;请输入你要求的斐波那契数列的项数：\\n&quot;);</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    res = fib(n);</span><br><span class=\"line\">    printf(&quot;fib[%d] = %d\\n&quot;,n,res);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4.-函数与数组\">4. 函数与数组<a title=\"#4.-函数与数组\" href=\"#4.-函数与数组\"></a></h4>\n<ul>\n<li>\n<p><strong>数组传参方式</strong><br>\n传参时传的是数组的首地址，所以还要传数组的大小。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void print_arr (int *p, int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for (i = 0; i &lt; n; i++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, p[i]);</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[] = &#123;1, 2, 3, 6, 6, 7&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    print_arr(a,sizeof(a) / sizeof(*a));</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 print_arr 函数中，接收数组的是一个指针变量，也就是接收的是数组首地址，实际上这个函数是不知道数组的大小的，只知道数组首地址，而在定义函数时用 sizeof§ / sizeof(*p) 是不可行的，sizeof§ 肯定是 8 字节，这是固定的，这算出来的是接收地址的指针变量的大小，并不是数组的大小。所以在传参时要传数组的大小。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void print_arr (int p[], int n)</span><br></pre></td></tr></table></figure>\n<p>定义时这样写成数组的形式，看似好像是把整个数组传过去了，实则不然，它的含义仍然是指针变量，跟上面是一样的。<br>\n所以在形参中定义成数组的形式和在 main 函数中定义时是不一样的，作为形参时，它就是指针变量。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[N] = &#123;1, 2, 4, 5, 6&#125;;</span><br><span class=\"line\">int *p = a;</span><br><span class=\"line\"></span><br><span class=\"line\">实参：         a       *a           a[0]        &amp;a[3]       p[i]        p       *p          p+1</span><br><span class=\"line\">                       *(a+0)                               *(p+i)              *(p+0)</span><br><span class=\"line\">形参接收类型： int*     int          int         int*        int         int*    int        int*     </span><br></pre></td></tr></table></figure>\n<p>数组逆序实现</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void func (int *a, int n)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i, j, tmp, mid;</span><br><span class=\"line\"></span><br><span class=\"line\">    mid = (n - 1) / 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(i = 0; i &lt;= mid; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            j = n - 1 -i;</span><br><span class=\"line\">            tmp = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[] = &#123;1, 3, 5, 7, 9&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // puts(a);     puts 是用于输出 char * </span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i = 0; i &lt; sizeof(a) / sizeof(*a); i++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, a[i]);</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    func(a,sizeof(a) / sizeof(*a));</span><br><span class=\"line\"></span><br><span class=\"line\">    for(i = 0; i &lt; sizeof(a) / sizeof(*a); i++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, a[i]);</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>函数与二维数组</strong><br>\n方式一：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define M   3</span><br><span class=\"line\">#define N   4</span><br><span class=\"line\"></span><br><span class=\"line\">void print_arr (int *p, int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i = 0; i &lt; n; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;%d &quot;, p[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[M][N] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    print_arr(&amp;a[0][0], M * N);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这里函数的形参采用的是一级指针接收，传入的实参不能直接传 a, a 为二维数组，为行指针，一级指针只能在列指针中移动，所以实参应转化为列指针 &amp;a[0][0] 传入, 把二维数组当成一个大的一维数组，个数为 M * N 。这里 &amp;a[0][0] 还可以为 *a 、a[0]、*(a + 0)。</p>\n<p>方式二：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define M   3</span><br><span class=\"line\">#define N   4</span><br><span class=\"line\"></span><br><span class=\"line\">// 二维数组 a 的本质就是一个数组指针,指向数组的指针</span><br><span class=\"line\">void print_arr (int (*p)[N], int m, int n) &#123;      // 或 void print_arr(int p[][N], int m, int n)</span><br><span class=\"line\"></span><br><span class=\"line\">    int i, j;</span><br><span class=\"line\">    printf(&quot;sizeof(p) = %d\\n&quot;,sizeof(p));   //  结果为：8，所以也是一个指针变量，不过这个指向的是一个数组，数组大小为 N 个元素</span><br><span class=\"line\"></span><br><span class=\"line\">    for(i = 0; i &lt; m; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(j = 0; j &lt; n; j++)&#123;</span><br><span class=\"line\">            printf(&quot;%4d &quot;, *(*(p + i) + j));     // 或 printf(&quot;%4d &quot;, p[i][j]);  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[M][N] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;sizeof(a) = %d\\n&quot;,sizeof(a));      // 结果为 48</span><br><span class=\"line\"></span><br><span class=\"line\">    print_arr(a, M, N);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想在实参中传入一个二维数组，而不是把它当成一维数组传入，那么在函数定义时的形参中要有与二维数组相对应的类型，前面已学过<strong>二维数组的本质就是数组指针</strong>，所以要接收一个二维数组，就应该在形参中用数组指针接收，a + 1 和 p + 1 效果是一样的，都是行指针。int (*p)[N] 中 N 为二维数组的列数。将二维数组接收过来后，对应的行数和列数也接收过来了，接下来就跟平时处理二维数组时一样。</p>\n<p>同样，跟一维数组一样，传过来的数组，接收的是首地址，同样不知道大小，所以还要传大小参数。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int [M][N] = &#123;&#125;;</span><br><span class=\"line\">int *p = *a;</span><br><span class=\"line\">int (*q)[N] = a;</span><br><span class=\"line\"></span><br><span class=\"line\">实参：      a[i][j]     *(a+i)+j        a[i]+j      p[i]        *p      q[i][j]     *q       q              p+3     q+2</span><br><span class=\"line\">                                                                                    *(q+0)</span><br><span class=\"line\">形参类型：  int          int *          int *       int          int     int         int *   int (*)[N]    int *    int(*)[N]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>练习题<br>\n求每个学生的平均成绩</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define M   3</span><br><span class=\"line\">#define N   5</span><br><span class=\"line\"></span><br><span class=\"line\">void print_arr (float (*p)[N], int m, int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i, j;</span><br><span class=\"line\">    printf(&quot;  科目一  科目二  科目三   科目四  平均\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    for(i = 0; i &lt; m; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(j = 0; j &lt; n; j++)&#123;</span><br><span class=\"line\">            printf(&quot;%7.2f &quot;, *(*(p + i) + j));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 求每个学生的平均成绩，并把平均成绩写在后面</span><br><span class=\"line\">void average (float (*p)[N], int m, int n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i, j;</span><br><span class=\"line\">    for(i = 0; i &lt; m; i++)&#123;</span><br><span class=\"line\">        float tmp = 0;</span><br><span class=\"line\">        for(j = 0; j &lt; n; j++)&#123;</span><br><span class=\"line\">            tmp += p[i][j]; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p[i][4] = tmp / (N - 1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    float a[M][N] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    average(a, M, N);</span><br><span class=\"line\">    print_arr(a, M, N);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/%E5%87%BD%E6%95%B0/1.png\" alt class=\"φcx\"></p>\n<p>求总平均成绩和把指定学生的四科成绩打印出来</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define M   3</span><br><span class=\"line\">#define N   4</span><br><span class=\"line\"></span><br><span class=\"line\">float average_scope(int *p, int n) &#123;</span><br><span class=\"line\">    float sum = 0;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        sum += p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum / n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void find_num(int (*p)[N], int num) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i = 0; i &lt; N; i++) &#123;</span><br><span class=\"line\">        printf(&quot;%d &quot;, *(*(p + num) + i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[M][N] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br><span class=\"line\">    int i, j;</span><br><span class=\"line\">    float ave;</span><br><span class=\"line\">    int num = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    ave = average_scope(*a, M * N);</span><br><span class=\"line\">    printf(&quot;ave = %.2f\\n&quot;, ave);</span><br><span class=\"line\"></span><br><span class=\"line\">    find_num(a, num);</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数与字符数组</p>\n<p>strcpy 的实现，它在库中的封装方式为：</p>\n<p><code>char *strcpy (char *dest, const char *src); </code></p>\n<p>src 为常量指针，不能通过该指针改变变量的值，因为该指针的内容是不能改变的。所以自己实现 strcpy 的代码也可用这种形式：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">char *mystrcpy (char *dest, const char *src) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    char *ret = dest;                   // 用 ret 记录 dest 的头指针，因为下面 dest++ 指针会移动</span><br><span class=\"line\">    if (dest != NULL &amp;&amp; src != NULL)    // 最后返回 ret 即可</span><br><span class=\"line\">        while ((*dest++ = *src++) != &#x27;\\0&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return ret;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    char str1[] = &quot;helloworld&quot;;</span><br><span class=\"line\">    char str2[128];</span><br><span class=\"line\"></span><br><span class=\"line\">    mystrcpy (str2, str1);</span><br><span class=\"line\"></span><br><span class=\"line\">    puts (str2);                // puts 会自动在后面加换行符</span><br><span class=\"line\"></span><br><span class=\"line\">    exit (0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>strncpy 实现</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *mystrncpy (char *dest, const char *src, size_t n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for (i = 0; i &lt; n &amp;&amp; (dest[i] = src[i]); i++) &#123;</span><br><span class=\"line\">        // (dest[i] = src[i]) 作用是一边拷贝到 dest 中，一边用作判断，当 (dest[i] = src[i])</span><br><span class=\"line\">        // 的值为 \\0 即在 &amp;&amp; 运算中式子不成立，跳出循环,因为 有时 src 的长度会小于 n ，即 src </span><br><span class=\"line\">        // 不够长, 那就只拷贝 src 那么长的</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // i &lt; n 时才拷贝 \\0, i &gt;= n，会自动跳过这条语句</span><br><span class=\"line\">    for (; i &lt; n; i++)</span><br><span class=\"line\">        dest[i] = &#x27;\\0&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return dest;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若 src 没有 n 那么长，经过 (dest[i] = src[i]) 将 \\0 复制到了 dest 中,且判断跳出循环，这时 \\0 是赋值到了字符串中的，当 src &gt; n 时，是因为 i &lt; n 跳出的，\\0 并无拷贝，最后应该将 dest[i] = ‘\\0’;</p>\n</li>\n</ul>\n<h4 id=\"5.-函数与指针\">5. 函数与指针<a title=\"#5.-函数与指针\" href=\"#5.-函数与指针\"></a></h4>\n<h5 id=\"指针函数-(返回值为指针)\">指针函数 (返回值为指针)<a title=\"#指针函数-(返回值为指针)\" href=\"#指针函数-(返回值为指针)\"></a></h5>\n<p>根据 Type name 可知，指针函数是定义函数，所以为<br>\n定义形式：返回值 函数名 （形参）  如：<code>int *fun (int)</code></p>\n<p>用途：例如前面 find_num 的实现，它只让你找到第几个学生的成绩，并没有然你输出，你却遍历输出那个学生的成绩，显然不是最完美的解决方案，这时就可以用返回一个指向函数的指针</p>\n<p>理论上的实现方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int (*)[N] find_num (int (*p)[N], int num) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (p + num);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把指针 p 移动到第 num 的学生的位置，由于 p 为行指针，所以理论上要这样写返回值就也要为对应的类型，即也要行指针，所以返回值为 int (*)[N],但是我们就只是想要得到第 num 行的那些数据，根本不需整个二维数组的形式返回来，只需在 num 行使用列指针即可，所以可以这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define M   3</span><br><span class=\"line\">#define N   4</span><br><span class=\"line\"></span><br><span class=\"line\">int * find_num (int (*p)[N], int num) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (num &gt; M - 1)</span><br><span class=\"line\">        return NULL;        // 不能写 -1，因为返回类型为指针</span><br><span class=\"line\">    return *(p + num);     // 也可 p[num];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a[M][N] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br><span class=\"line\">    int i, j;</span><br><span class=\"line\">    int num = 0;</span><br><span class=\"line\">    int *res;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = find_num(a, num);</span><br><span class=\"line\">    if (res != NULL) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(i = 0; i &lt; N; i++)</span><br><span class=\"line\">            printf(&quot;%d &quot;, res[i]);</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        printf(&quot;Can not find!\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"函数指针\">函数指针<a title=\"#函数指针\" href=\"#函数指针\"></a></h5>\n<p>记忆：整型指针为指针指向整型，那么函数指针自然就是指向函数的指针</p>\n<p>根据 Type name 可知，函数指针是定义指针，所以为<br>\n定义形式：类型 （*指针名） (形参)  如: <code>int (*p)(int);</code></p>\n<p>类型：int (int) --&gt; 函数和形参的类型<br>\nname: *p<br>\n两个合起来就为 <code>int (*p)(int);</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int add (int a, int b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int a = 3, b = 5;</span><br><span class=\"line\">    int ret;</span><br><span class=\"line\">    int (*p) (int, int);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = add;            // 也可 p = &amp;add; 函数名跟数组名一样，就是个地址</span><br><span class=\"line\"></span><br><span class=\"line\">    // ret = add (a, b);  // 原来的写法</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = p (a, b);</span><br><span class=\"line\">    printf (&quot;%d\\n&quot;, ret);  </span><br><span class=\"line\"></span><br><span class=\"line\">    exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"函数指针数组\">函数指针数组<a title=\"#函数指针数组\" href=\"#函数指针数组\"></a></h5>\n<p>指针数组：数组中每个元素就是一个指针<br>\n函数指针：指向函数的指针<br>\n函数指针数组：数组中每个元素都是一个指向函数的指针</p>\n<p>定义：类型 (*数组名 【下标】)  (形参) 如：<code>int (*arr[N]) (int);</code></p>\n<p>类型：<code>int (int)</code> --&gt; 函数和形参的类型<br>\nname: <code>*arr[N] </code><br>\n两个合起来就为 <code>int (*arr[N]) (int);</code></p>\n<h5 id=\"指向指针函数的函数指针数组\">指向指针函数的函数指针数组<a title=\"#指向指针函数的函数指针数组\" href=\"#指向指针函数的函数指针数组\"></a></h5>\n<p>函数指针数组：数组中每个元素都是一个指向函数的指针<br>\n指针函数 (返回值为指针)，即这个函数是指针类型的<br>\n数组中的每个指向函数的指针</p>\n<p>定义：<code>int *(*funcp[N])(int);</code><br>\n指针数组：<code>(*funcp[N])</code><br>\n函数指针数组: 要加上返回值类型和形参类型，即：<code>int (*funcp[N])(int)(int);</code><br>\n指针函数：即返回值为指针（即返回值为地址），将里面的元素的返回值为整型指针，而不是整型。<code>int *(*funcp[N])(int);</code></p>\n<h4 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h4>\n<p>自己的理解：为什么不能直接调用函数，而是特地定义指针来，因为函数名是地址常量，函数指针是指针变量，有区别，就跟前面学的指针变量跟数组名一样的区别。</p>\n<p>老师讲解：传参时如果传一个函数名过去(因为可能要用到某函数，将此函数传过去用)，这时形参就要定义一个同类型的来接收。<br>\n传整形数     ----&gt;    整型指针接收<br>\n传数组名     ----&gt;    指针接收<br>\n函数名       ----&gt;    指向函数的指针来接收</p>\n<p>如：快速排序的封装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void qsort (void *base, size_t nmemb, size_t size, int (*compar) (const void *, const void *));</span><br></pre></td></tr></table></figure>\n<p>此方式定义为函数指针，返回值为函数</p>\n<p>总之就是为了满足传参的要求，这些函数叫<strong>回调函数</strong>。</p>\n<p><strong>数组、指针与函数的结合</strong></p>\n<p><strong>数组指针</strong>：像整型指针为指向整型的指针，而数组指针则为指向数组的指针。<br>\nType name<br>\nType —&gt; 数组 —&gt; int[N]<br>\nname —&gt; 指针 —&gt; *p<br>\nType name —&gt; int (*p)[N];</p>\n<p><strong>指针数组</strong>：数组中每个元素就是一个指针。<br>\nType —&gt; int *<br>\nname —&gt; arr[N]<br>\nType name —&gt; int *arr[N]</p>\n<p><strong>指针函数</strong>：定义函数<br>\n返回值 函数名 （形参）<br>\n返回值 —&gt; int *<br>\n函数名 —&gt; func</p>\n<p><strong>函数指针</strong>：指向函数的指针<br>\n定义指针<br>\nType name<br>\nType —&gt; int (int)<br>\nname —&gt; *p<br>\nint (*p) (int)</p>\n<p><strong>函数指针数组</strong>：数组中每个元素都是一个指向函数的指针<br>\n指针数组：int *arr[N]<br>\n函数指针：int (*p) (int)<br>\n只需将函数指针的指针名改为数组的形式就可<br>\nint (*arr[N]) (int)</p>\n<p><strong>指向指针函数的函数指针数组</strong><br>\n指针数组是指向函数，那么指向指针函数的函数指针数组为指向指针函数，只需在定义函数的返回值时定义指针类型即可<br>\nint *(*func[N]) (int)</p>\n","prev":{"title":"构造类型","link":"2024/构造类型"},"next":{"title":"指针与变量","link":"2024/指针与变量"},"plink":"https://CHONG589.github.io/2024/函数/","reward":true,"copyright":{"author":"Chong","link":"<a href=\"https://CHONG589.github.io/2024/函数/\" title=\"函数\">https://CHONG589.github.io/2024/函数/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}