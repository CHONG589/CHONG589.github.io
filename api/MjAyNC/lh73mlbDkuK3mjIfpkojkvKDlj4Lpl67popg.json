{"title":"函数中指针传参问题","date":"2024-02-16T07:51:58.000Z","date_formatted":{"ll":"2024年2月16日","L":"2024/02/16","MM-DD":"02-16"},"author":"Chong","thumbnail":"2024/函数中指针传参问题/./nsurlprotocol.png","link":"2024/函数中指针传参问题","comments":true,"updated":"2024-12-25T07:35:42.000Z","content":"<p>在函数中进行指针传参时，尤其要注意指针传过去后，在函数里的操作是不是在本指针下进行，有可能是在指针的复制品中进行的，函数执行完后，把里面的变量等被销毁，这样就相当于对传过来的指针什么操作都没有做。</p>\n<span id=\"more\"></span>\n<p>下面有几个关于这个的例子</p>\n<ul>\n<li>例一：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span> <span class=\"params\">(<span class=\"type\">int</span> **p, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这就相当于将分配内存的首地址给了 main 中的 p;</span></span><br><span class=\"line\">    *p = <span class=\"built_in\">malloc</span> (n);            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 传指针变量所在的地址</span></span><br><span class=\"line\">    func (&amp;p, num);         </span><br><span class=\"line\">    <span class=\"built_in\">free</span> (p);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例二：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sqlist_create1</span> <span class=\"params\">(sqlist **ptr)</span> &#123;</span><br><span class=\"line\">    *ptr = <span class=\"built_in\">malloc</span> (<span class=\"keyword\">sizeof</span> (**ptr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*ptr == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">    (*ptr) -&gt; last = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sqlist *<span class=\"built_in\">list</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">datatype arr[] = &#123;<span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">45</span>, <span class=\"number\">56</span>&#125;;</span><br><span class=\"line\">datatype arr1[] = &#123;<span class=\"number\">78</span>, <span class=\"number\">89</span>, <span class=\"number\">56</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">sqlist_create (&amp;<span class=\"built_in\">list</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">list</span> == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span> (<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;sqlist_create () failed!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<ul>\n<li>例三：</li>\n</ul>\n<p>有头节点的链表创造</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span> *<span class=\"title function_\">list_create</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">list</span> *me;</span><br><span class=\"line\">    me = <span class=\"built_in\">malloc</span> (<span class=\"keyword\">sizeof</span> (*me));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (me == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    me -&gt; next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这里可知，无论是有头节点还是无头节点，在创造链表的函数中，都有这个问题，要么是要把函数里创造好的链表传回来，要么就是用二级指针传参过去，即当在 main 函数中定义了一个指针后，不能只是这样将一个空指针传过去，这样只会是在函数中复制一个复制品，用二级指针则意味着是操作的就是这个指针。<strong>即指针为空时，要注意传参问题</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意：在操作无头节点时，函数的传参形式尤其要注意，比如在这里，me 是有可能被 free () 掉的，</span></span><br><span class=\"line\"><span class=\"comment\">// 如果最后，没将 me = q; me 就会丢失掉（即链表丢失），main 函数里调用 show 就会出现段错误，</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 me 已经被释放掉，你再访问就段错误了。而带头节点的就不会有此类问题，因为头指针一直都是</span></span><br><span class=\"line\"><span class=\"comment\">// 指着头节点的，而头节点无论怎么样都不会被释放掉或者是改变，在操作时会跳过头节点操作。</span></span><br><span class=\"line\"></span><br><span class=\"line\">node_st *<span class=\"title function_\">jose_kill</span> <span class=\"params\">(node_st *me, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    node_st *p, *q = me;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q -&gt; next != q) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            q = q -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;delete: %d\\n&quot;</span>, q -&gt; data);</span><br><span class=\"line\">        p -&gt; next = q -&gt; next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span> (q);</span><br><span class=\"line\">        q = p -&gt; next;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    me = q;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的问题就是在 kill 的过程中会把 me 指向的节点 free () 掉，要把 me 重新指向后返回来，至于为什么还要返回，是因为当 me free () 后， me 就相当于空指针，什么都没有，则在实参传过来的什么都没指向，而最后将 me = q; 对它操作同上面的原理一样，要返回来。</p>\n<p>而关于销毁链表的函数不用，一是因为在一个一个销毁的过程中也没丢失头指针的指向，二是因为最后返回来的本来就是什么都没有的，只要把指针指向的空间 free () 掉就行。</p>\n<p>对于有头节点的删除节点不会有这个问题，始终有头节点在那，而无头结点的删除可能要注意一下。</p>\n","next":{"title":"重定义 typedef","link":"2024/重定义-typedef"},"plink":"https://CHONG589.github.io/2024/函数中指针传参问题/"}