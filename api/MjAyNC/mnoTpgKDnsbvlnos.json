{"title":"构造类型","date":"2024-02-04T09:47:18.000Z","date_formatted":{"ll":"2024年2月4日","L":"2024/02/04","MM-DD":"02-04"},"author":"Chong","thumbnail":"2024/构造类型/./thumb.png","link":"2024/构造类型","comments":true,"updated":"2024-12-25T07:07:25.000Z","content":"<h3 id=\"结构体\">结构体<a title=\"#结构体\" href=\"#结构体\"></a></h3>\n<h4 id=\"产生及意义\">产生及意义<a title=\"#产生及意义\" href=\"#产生及意义\"></a></h4>\n<h4 id=\"类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char\">类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如 int、char<a title=\"#类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char\" href=\"#类型描述(不占存储空间)，描述是怎样一个结构，是一个类型，如-int、char\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构体名 &#123;</span><br><span class=\"line\">\t数组类型 成员1；</span><br><span class=\"line\">\t数据类型 成员2；</span><br><span class=\"line\">\t......  </span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n<h4 id=\"嵌套定义\">嵌套定义<a title=\"#嵌套定义\" href=\"#嵌套定义\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct birthday_st &#123;</span><br><span class=\"line\">\tint year;</span><br><span class=\"line\">\tint month;</span><br><span class=\"line\">\tint day;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">struct student_st &#123;</span><br><span class=\"line\">\tint id;</span><br><span class=\"line\">\tchar name[NAMESIZE];</span><br><span class=\"line\">\tstruct birthday_st birth;</span><br><span class=\"line\">\tint math;</span><br><span class=\"line\">\tint chinese;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct student_st &#123;</span><br><span class=\"line\">\tint id;</span><br><span class=\"line\">\tchar name[NAMESIZE];</span><br><span class=\"line\">\tstruct birthday_st &#123;</span><br><span class=\"line\">\t\tint year;</span><br><span class=\"line\">\t\tint month;</span><br><span class=\"line\">\t\tint day;</span><br><span class=\"line\">\t&#125;birth;</span><br><span class=\"line\">\tint math;</span><br><span class=\"line\">\tint chinese;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定义变量(变量、数组、指针)、初始化及成员引用\">定义变量(变量、数组、指针)、初始化及成员引用<a title=\"#定义变量(变量、数组、指针)、初始化及成员引用\" href=\"#定义变量(变量、数组、指针)、初始化及成员引用\"></a></h4>\n<ul>\n<li>\n<p>成员引用：变量名.成员名<br>\n像上面 <code>struct birthday_st birth</code> 定义变量的方式，这个变量名 birth 存的只是结构体的<em>首地址</em>。</p>\n</li>\n<li>\n<p>成员引用：指针 -&gt; 成员名 <code>(*指针).成员名</code></p>\n</li>\n</ul>\n<h4 id=\"占用内存空间大小\">占用内存空间大小<a title=\"#占用内存空间大小\" href=\"#占用内存空间大小\"></a></h4>\n<p><em>内存对齐</em></p>\n<h4 id=\"函数传参（值，地址）\">函数传参（值，地址）<a title=\"#函数传参（值，地址）\" href=\"#函数传参（值，地址）\"></a></h4>\n<p>一般不用结构体的值(即整个结构体)传参，因为当结构体里的成员很多时，定义形参时也要相对应的大小，内存开销大，所以我们一般传指针，形参只需定义指针即可，而指针变量大小在同一机器中时是固定。</p>\n<h3 id=\"共用体\">共用体<a title=\"#共用体\" href=\"#共用体\"></a></h3>\n<h4 id=\"产生及意义-1\">产生及意义<a title=\"#产生及意义-1\" href=\"#产生及意义-1\"></a></h4>\n<p>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是<strong>任何时候只能有一个成员带有值</strong>。共用体提供了一种使用相同的内存位置的有效方式。</p>\n<h4 id=\"类型描述\">类型描述<a title=\"#类型描述\" href=\"#类型描述\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union [union tag] &#123;</span><br><span class=\"line\">member definition;</span><br><span class=\"line\">member definition;</span><br><span class=\"line\">...</span><br><span class=\"line\">member definition;</span><br><span class=\"line\">&#125; [one or more union variables];</span><br></pre></td></tr></table></figure>\n<p>union tag 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。</p>\n<h4 id=\"嵌套定义-1\">嵌套定义<a title=\"#嵌套定义-1\" href=\"#嵌套定义-1\"></a></h4>\n<p>练习：对一个具有 32 位值的高 16 位和低 16 位进行相加</p>\n<ul>\n<li>方法一：根据共用体和结构体的特性进行解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">union &#123;</span><br><span class=\"line\">\tstruct &#123;</span><br><span class=\"line\">\t\tuint16_t i;</span><br><span class=\"line\">\t\tuint16_t j;</span><br><span class=\"line\">\t&#125;x;</span><br><span class=\"line\">\tuint32_t y;</span><br><span class=\"line\">&#125;a;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">\ta.y = 0x11223344;</span><br><span class=\"line\">\tprintf(&quot;%x&quot;, a.x.i + a.x.j);</span><br><span class=\"line\">\texit (0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二：用位运算解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">\tuint32_t i = 0x11223344;</span><br><span class=\"line\">\tprintf(&quot;%x\\n&quot;, (i &gt;&gt; 16) + i &amp; 0xffff);</span><br><span class=\"line\">\texit (0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"定义变量（变量、数组、指针），初始化及成员引用\">定义变量（变量、数组、指针），初始化及成员引用<a title=\"#定义变量（变量、数组、指针），初始化及成员引用\" href=\"#定义变量（变量、数组、指针），初始化及成员引用\"></a></h4>\n<p>跟结构体一样</p>\n<h4 id=\"占用内存空间大小-1\">占用内存空间大小<a title=\"#占用内存空间大小-1\" href=\"#占用内存空间大小-1\"></a></h4>\n<p><strong>共用体占用的内存应足够存储共用体中最大的成员</strong></p>\n<h4 id=\"函数传参（值，地址）-1\">函数传参（值，地址）<a title=\"#函数传参（值，地址）-1\" href=\"#函数传参（值，地址）-1\"></a></h4>\n<h4 id=\"位域\">位域<a title=\"#位域\" href=\"#位域\"></a></h4>\n<p>C 语言的位域（bit-field）是一种特殊的结构体成员，允许我们按位对成员进行定义，指定其占用的位数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123;</span><br><span class=\"line\">\tint i;</span><br><span class=\"line\">\tint j;</span><br><span class=\"line\">&#125;a;</span><br></pre></td></tr></table></figure>\n<p>这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1，在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，您可以定义变量的宽度来告诉编译器，您将只使用这些字节。例如，上面的结构可以重写成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123;</span><br><span class=\"line\">\tint i: 1;</span><br><span class=\"line\">\tint j: 1;</span><br><span class=\"line\">&#125;a;</span><br></pre></td></tr></table></figure>\n<p>现在，上面的结构中，a 变量将占用 4 个字节的内存空间(内存对齐的原因)，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 a 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节。</p>\n<h3 id=\"枚举\">枚举<a title=\"#枚举\" href=\"#枚举\"></a></h3>\n<p>枚举是 C 语言中的一种基本数据类型，用于定义一组具有离散值的常量，它可以让数据更简洁，更易读。枚举类型通常用于为程序中的一组相关的常量取名字，以便于程序的可读性和维护性。</p>\n<p>定义一个枚举类型，需要使用 enum 关键字，后面跟着枚举类型的名称，以及用大括号 {} 括起来的一组枚举常量。每个枚举常量可以用一个标识符来表示，也可以为它们指定一个整数值，如果没有指定，那么默认从 0 开始递增。枚举语法定义格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum　枚举名　&#123;</span><br><span class=\"line\">    枚举元素1,枚举元素2,……</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来我们举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MON  1</span><br><span class=\"line\">#define TUE  2</span><br><span class=\"line\">#define WED  3</span><br><span class=\"line\">#define THU  4</span><br><span class=\"line\">#define FRI  5</span><br><span class=\"line\">#define SAT  6</span><br><span class=\"line\">#define SUN  7</span><br></pre></td></tr></table></figure>\n<p>这个看起来代码量就比较多，接下来我们看看使用枚举的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum DAY &#123;</span><br><span class=\"line\">      MON=1, TUE, WED, THU, FRI, SAT, SUN</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p>\n<p>可以用 enum 当成宏来使用，enum 在预处理后，里面的值不会替换，这样在查看哪里错的时候，这样才能更直观的知道这个变量是干嘛的，而不是被替换成了值。</p>\n","prev":{"title":"动态内存管理","link":"2024/动态内存管理"},"next":{"title":"函数","link":"2024/函数"},"plink":"https://CHONG589.github.io/2024/构造类型/"}