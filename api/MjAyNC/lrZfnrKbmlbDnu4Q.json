{"title":"字符数组","date":"2024-02-02T13:50:00.000Z","date_formatted":{"ll":"2024年2月2日","L":"2024/02/02","MM-DD":"02-02"},"author":"Chong","thumbnail":"2024/字符数组/./thumb.png","link":"2024/字符数组","comments":true,"updated":"2024-12-25T08:29:07.000Z","content":"<h3 id=\"字符数组\">字符数组<a title=\"#字符数组\" href=\"#字符数组\"></a></h3>\n<h4 id=\"初始化\">初始化<a title=\"#初始化\" href=\"#初始化\"></a></h4>\n<h5 id=\"（1）单个字符初始化\">（1）单个字符初始化<a title=\"#（1）单个字符初始化\" href=\"#（1）单个字符初始化\"></a></h5>\n<p><code>char str[N] = &#123;'a','b','c'&#125;;</code></p>\n<h5 id=\"（2）字符串常量初始化\">（2）字符串常量初始化<a title=\"#（2）字符串常量初始化\" href=\"#（2）字符串常量初始化\"></a></h5>\n<ul>\n<li><code>char str[N] = &quot;a&quot;;</code></li>\n</ul>\n<p>这个要区别于一般的数组，虽然这里只有 <code>&quot;a&quot;</code> 一个字符，但是它占用了两块空间，末尾还有一个 <code>\\0</code>,表示结束标志(这个是只有<strong>字符数组</strong>才有 <code>'\\0'</code>，像整型数组等是没有的)。所以即使你在输出时想输出 3 个字符，但它遇到 <code>\\0</code> 会自动结束。例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>,str[i]);</span><br></pre></td></tr></table></figure>\n<p>这时只会输出一个字符 <code>'a'</code>。</p>\n<ul>\n<li>在用 <code>gets(str)</code> 连续输入字符串时，也会出现和用 <code>scanf(&quot;%s&quot;, str)</code> 一样的问题，即使输入的大小大于数组的大小时，也不会报错，会导致<strong>越界</strong>。并且它会自动在输入结束后加 <code>\\0</code>。</li>\n</ul>\n<p>字符数组在初始化时只有在定义时才可以<code>char str[N] = &quot;hello&quot;;</code>而在定义完后，不能单独这样赋初值：<code>str = &quot;hello&quot;;</code>, str 表示地址，是一个常量，不能给常量赋值。</p>\n<h4 id=\"相关的函数\">相关的函数<a title=\"#相关的函数\" href=\"#相关的函数\"></a></h4>\n<p>包含在 <code>#include &lt;string.h&gt;</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*strlen &amp; sizeof</span></span><br><span class=\"line\"><span class=\"comment\"> *strcpy &amp; strncpy</span></span><br><span class=\"line\"><span class=\"comment\"> *strcat &amp; strncat</span></span><br><span class=\"line\"><span class=\"comment\"> *strcmp &amp; strncmp</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>strlen 计算的长度不包含 <code>'\\0'</code>。</p>\n</li>\n<li>\n<p>sizeof 计算的是在内存中真正所占的字节数，即包含 <code>'\\0'</code>。<br>\n<code>char str[] = &quot;hello\\0abc&quot;;</code></p>\n</li>\n</ul>\n<p>用 <code>strlen(str)</code> 所得出的结果是 5 个字节，而用 <code>sizeof(str)</code> 得出的结果是 10 个字节。</p>\n<ul>\n<li>strcpy()</li>\n</ul>\n<p>不能用 <code>str = &quot;hello&quot;;</code>这样赋值，但可用 <code>strcpy()</code>,复制以 <code>'\\0'</code>作为结束标志。接收拷贝值的容器必须有足够大小装拷贝的值。</p>\n<p><code>strcpy(str,&quot;abcde&quot;);</code></p>\n<ul>\n<li>strncpy()</li>\n</ul>\n<p>防止目标接收容器不够大的情况</p>\n<p><code>char *strncpy(char *dest, const char *src, size_t n);</code></p>\n<p><code>n</code> 的大小一般设置成 <code>dest</code> 的大小减一。</p>\n<ul>\n<li>strcat() 连接</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str[] = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(str,<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(str,<span class=\"string\">&quot;world!&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str);</span><br></pre></td></tr></table></figure>\n<p>输出结构：hello world!</p>\n<ul>\n<li>strcpm() 比较的是 <strong>ASCII</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strcpm</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *s1,<span class=\"type\">const</span> <span class=\"type\">char</span> *s2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s1 == s2,返回为 <span class=\"number\">0</span></span><br><span class=\"line\">s1 &lt; s2,返回为负值</span><br><span class=\"line\">s1 &gt; s2,返回正值</span><br></pre></td></tr></table></figure>\n<p>可以用 s1 - s2 理解</p>\n<h4 id=\"3.-练习\">3. 练习<a title=\"#3.-练习\" href=\"#3.-练习\"></a></h4>\n<p>（1）单词计数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单词间的间隔形式</span></span><br><span class=\"line\"><span class=\"comment\">// sldk   sdfasdf           fasldjf          asdlkfj</span></span><br><span class=\"line\"><span class=\"comment\">// sldkjf                       fasldjkf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分隔符的后面是一个字母表示这是一个单词新开始的位置，</span></span><br><span class=\"line\"><span class=\"comment\">// 某一个字母的前面不是分隔符表示位于单词内部，不去计数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标记前一个是否为一个字母</span></span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;                           </span><br><span class=\"line\">\t<span class=\"comment\">// gets 遇到分隔符不会结束输入，scanf 的 %s 才会</span></span><br><span class=\"line\">    gets(str);                              </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; str[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// 表示当前字符为分隔符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27; &#x27;</span>)                   </span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;    <span class=\"comment\">// 当前字符为分隔符，不是字母，flag 置0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>             <span class=\"comment\">// 当前字符为字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag = <span class=\"number\">0</span>)&#123;  <span class=\"comment\">// 且前一个字符为分隔符，count++,将 flag = 1</span></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;count = %d\\n&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"指针与变量","link":"2024/指针与变量"},"next":{"title":"二维数组","link":"2024/二维数组"},"plink":"https://CHONG589.github.io/2024/字符数组/"}